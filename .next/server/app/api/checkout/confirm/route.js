/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/checkout/confirm/route";
exports.ids = ["app/api/checkout/confirm/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$":
/*!****************************************************!*\
  !*** ./node_modules/mysql2/lib/ sync ^cardinal.*$ ***!
  \****************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "../../client/components/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "../../client/components/request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "../../client/components/static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcheckout%2Fconfirm%2Froute&page=%2Fapi%2Fcheckout%2Fconfirm%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcheckout%2Fconfirm%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcheckout%2Fconfirm%2Froute&page=%2Fapi%2Fcheckout%2Fconfirm%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcheckout%2Fconfirm%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_ASUS_AngularWebApp_crumbled_website_app_api_checkout_confirm_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/checkout/confirm/route.ts */ \"(rsc)/./app/api/checkout/confirm/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/checkout/confirm/route\",\n        pathname: \"/api/checkout/confirm\",\n        filename: \"route\",\n        bundlePath: \"app/api/checkout/confirm/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\ASUS\\\\AngularWebApp\\\\crumbled-website\\\\app\\\\api\\\\checkout\\\\confirm\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ASUS_AngularWebApp_crumbled_website_app_api_checkout_confirm_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/checkout/confirm/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGVja291dCUyRmNvbmZpcm0lMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmNoZWNrb3V0JTJGY29uZmlybSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNoZWNrb3V0JTJGY29uZmlybSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDQW5ndWxhcldlYkFwcCU1Q2NydW1ibGVkLXdlYnNpdGUlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q0FTVVMlNUNBbmd1bGFyV2ViQXBwJTVDY3J1bWJsZWQtd2Vic2l0ZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD1zdGFuZGFsb25lJnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3VDO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J1bWJsZWQtd2Vic2l0ZS8/MTM4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxBU1VTXFxcXEFuZ3VsYXJXZWJBcHBcXFxcY3J1bWJsZWQtd2Vic2l0ZVxcXFxhcHBcXFxcYXBpXFxcXGNoZWNrb3V0XFxcXGNvbmZpcm1cXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jaGVja291dC9jb25maXJtL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2hlY2tvdXQvY29uZmlybVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY2hlY2tvdXQvY29uZmlybS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXEFTVVNcXFxcQW5ndWxhcldlYkFwcFxcXFxjcnVtYmxlZC13ZWJzaXRlXFxcXGFwcFxcXFxhcGlcXFxcY2hlY2tvdXRcXFxcY29uZmlybVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY2hlY2tvdXQvY29uZmlybS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcheckout%2Fconfirm%2Froute&page=%2Fapi%2Fcheckout%2Fconfirm%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcheckout%2Fconfirm%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/checkout/confirm/route.ts":
/*!*******************************************!*\
  !*** ./app/api/checkout/confirm/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/../../node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ \"(rsc)/../../node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _lib_auth_options__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/auth-options */ \"(rsc)/./lib/auth-options.ts\");\n/* harmony import */ var _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/services/databaseService */ \"(rsc)/./lib/services/databaseService.ts\");\n/* harmony import */ var _lib_services_orderModeService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/services/orderModeService */ \"(rsc)/./lib/services/orderModeService.ts\");\n\n\n\n\n\n\n\n// Helper function to get or create cart (same as cart API)\nasync function getOrCreateCart() {\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_2__.cookies)();\n    let cartId = cookieStore.get(\"cart_id\")?.value;\n    if (!cartId) {\n        const sessionId = (0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n        const result = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query('INSERT INTO carts (session_id, status, created_at) VALUES (?, \"active\", NOW())', [\n            sessionId\n        ]);\n        cartId = result.insertId.toString();\n        setCartCookie(cartId);\n        console.log(\"Created new cart:\", cartId);\n    } else {\n        const cartExists = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query('SELECT * FROM carts WHERE id = ? AND status = \"active\"', [\n            cartId\n        ]);\n        if (!Array.isArray(cartExists) || cartExists.length === 0) {\n            const sessionId = (0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n            const result = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query('INSERT INTO carts (session_id, status, created_at) VALUES (?, \"active\", NOW())', [\n                sessionId\n            ]);\n            cartId = result.insertId.toString();\n            setCartCookie(cartId);\n            console.log(\"Created new cart (old one invalid):\", cartId);\n        }\n    }\n    return cartId;\n}\nfunction setCartCookie(cartId) {\n    const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_2__.cookies)();\n    cookieStore.set(\"cart_id\", cartId, {\n        httpOnly: true,\n        secure: \"development\" === \"production\",\n        sameSite: \"strict\",\n        maxAge: 7 * 24 * 60 * 60\n    });\n}\nasync function POST(request) {\n    try {\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API called\");\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_lib_auth_options__WEBPACK_IMPORTED_MODULE_3__.authOptions);\n        const requestBody = await request.json();\n        // Handle both field names for backward compatibility\n        const guestData = requestBody.guestData || requestBody.guest;\n        const { selectedAddressId, useNewAddress, newAddress, saveNewAddress } = requestBody;\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Request body:\", JSON.stringify(requestBody, null, 2));\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Guest data:\", JSON.stringify(guestData, null, 2));\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Save New Address:\", saveNewAddress);\n        const cartId = await getOrCreateCart();\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Session:\", session?.user?.email);\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Selected Address ID:\", selectedAddressId);\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Use New Address:\", useNewAddress);\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Cart ID:\", cartId);\n        // Validate cart\n        if (!cartId) {\n            console.error(\"❌ [DEBUG] Confirm API - No cart ID found\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: \"Cart not found\",\n                error: \"No active cart found\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Fetching cart items\");\n        // Fetch and validate cart items - using the same query structure as cart API\n        const cartResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(`SELECT \n        ci.id,\n        ci.quantity,\n        ci.product_id,\n        p.name as product_name,\n        p.is_pack,\n        p.base_price,\n        p.flavor_size as size,\n        p.image_url,\n        p.count,\n        p.stock_quantity\n       FROM cart_items ci\n       JOIN products p ON ci.product_id = p.id\n       WHERE ci.cart_id = ? AND p.is_active = true\n       ORDER BY ci.id DESC`, [\n            cartId\n        ]);\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Cart result:\", cartResult);\n        // Handle both array and single object results like cart API does\n        const cartItemsArray = Array.isArray(cartResult) ? cartResult : cartResult ? [\n            cartResult\n        ] : [];\n        if (cartItemsArray.length === 0) {\n            console.error(\"❌ [DEBUG] Confirm API - Cart is empty\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: \"Cart is empty\",\n                error: \"No items found in cart\"\n            }, {\n                status: 400\n            });\n        }\n        // Check stock availability using order mode service\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Checking cart availability with order mode service\");\n        // Prepare cart items for availability check\n        const cartItemsForCheck = await Promise.all(cartItemsArray.map(async (item)=>{\n            let flavors = [];\n            // Fetch flavors for pack items\n            if (item.is_pack) {\n                const flavorResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(\"SELECT f.id, f.name, cif.quantity FROM cart_item_flavors cif JOIN flavors f ON cif.flavor_id = f.id WHERE cif.cart_item_id = ?\", [\n                    item.id\n                ]);\n                if (Array.isArray(flavorResult)) {\n                    flavors = flavorResult.map((flavor)=>({\n                            id: flavor.id,\n                            name: flavor.name,\n                            quantity: flavor.quantity\n                        }));\n                }\n            }\n            return {\n                id: item.id,\n                productId: item.product_id,\n                quantity: item.quantity,\n                isPack: item.is_pack,\n                packSize: item.size,\n                productName: item.product_name,\n                flavors\n            };\n        }));\n        const availabilityCheck = await _lib_services_orderModeService__WEBPACK_IMPORTED_MODULE_5__.orderModeService.checkCartAvailability(cartItemsForCheck);\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Availability check result:\", availabilityCheck);\n        if (!availabilityCheck.isAvailable) {\n            // Build a detailed error message with specific item names\n            let errorMessage = \"Some items in your cart are currently out of stock:\\n\\n\";\n            if (availabilityCheck.outOfStockItems && availabilityCheck.outOfStockItems.length > 0) {\n                const productItems = availabilityCheck.outOfStockItems.filter((item)=>item.type === \"product\");\n                const flavorItems = availabilityCheck.outOfStockItems.filter((item)=>item.type === \"flavor\");\n                if (productItems.length > 0) {\n                    errorMessage += \"**Products out of stock:**\\n\";\n                    for (const item of productItems){\n                        // Find the actual product name from cart items\n                        const cartItem = cartItemsArray.find((ci)=>ci.product_id === item.id);\n                        const productName = cartItem ? cartItem.product_name : `Product ${item.id}`;\n                        errorMessage += `• ${productName} (${item.requestedQuantity} requested, ${item.availableQuantity} available)\\n`;\n                    }\n                    errorMessage += \"\\n\";\n                }\n                if (flavorItems.length > 0) {\n                    errorMessage += \"**Flavors out of stock:**\\n\";\n                    // Get all flavor IDs to fetch names in batch\n                    const flavorIds = flavorItems.map((item)=>item.id);\n                    const flavorResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(`SELECT id, name FROM flavors WHERE id IN (${flavorIds.join(\",\")})`);\n                    if (Array.isArray(flavorResult)) {\n                        for (const item of flavorItems){\n                            const flavor = flavorResult.find((f)=>f.id === item.id);\n                            const flavorName = flavor ? flavor.name : `Flavor ${item.id}`;\n                            errorMessage += `• ${flavorName} (${item.requestedQuantity} requested, ${item.availableQuantity} available)\\n`;\n                        }\n                    } else {\n                        // Fallback if batch query fails\n                        for (const item of flavorItems){\n                            errorMessage += `• Flavor ${item.id} (${item.requestedQuantity} requested, ${item.availableQuantity} available)\\n`;\n                        }\n                    }\n                    errorMessage += \"\\n\";\n                }\n                errorMessage += \"Please remove these items from your cart or contact us for availability updates.\";\n            } else {\n                errorMessage = \"Some items are not available for ordering. Please check your cart and try again.\";\n            }\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: \"Items out of stock\",\n                error: errorMessage,\n                outOfStockItems: availabilityCheck.outOfStockItems\n            }, {\n                status: 400\n            });\n        }\n        // Process cart items with flavors\n        const items = await Promise.all(cartItemsArray.map(async (item)=>{\n            let flavors = [];\n            // Fetch flavors for pack items\n            if (item.is_pack) {\n                const flavorResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(`SELECT \n            f.id, \n            f.name, \n            cif.quantity,\n            f.mini_price,\n            f.medium_price,\n            f.large_price\n           FROM cart_item_flavors cif\n           JOIN flavors f ON cif.flavor_id = f.id\n           WHERE cif.cart_item_id = ?`, [\n                    item.id\n                ]);\n                if (Array.isArray(flavorResult)) {\n                    flavors = flavorResult.map((flavor)=>({\n                            id: flavor.id,\n                            name: flavor.name,\n                            quantity: flavor.quantity,\n                            price: item.size === \"Large\" ? flavor.large_price : item.size === \"Medium\" ? flavor.medium_price : flavor.mini_price,\n                            size: item.size\n                        }));\n                }\n            }\n            // Calculate total for this item\n            const baseTotal = item.base_price * item.quantity;\n            const flavorTotal = flavors.reduce((sum, flavor)=>sum + flavor.price * flavor.quantity, 0);\n            const total = baseTotal + flavorTotal;\n            console.log(`🔍 [DEBUG] Confirm API - Item ${item.id} total calculation:`);\n            console.log(`  - Base price: ${item.base_price}`);\n            console.log(`  - Quantity: ${item.quantity}`);\n            console.log(`  - Base total: ${baseTotal}`);\n            console.log(`  - Flavors:`, flavors.map((f)=>`${f.name} (${f.price} x ${f.quantity} = ${f.price * f.quantity})`));\n            console.log(`  - Flavor total: ${flavorTotal}`);\n            console.log(`  - Final total: ${total}`);\n            return {\n                id: item.id,\n                name: item.product_name,\n                basePrice: item.base_price,\n                quantity: item.quantity,\n                isPack: item.is_pack,\n                packSize: item.size,\n                imageUrl: item.image_url,\n                count: item.count,\n                flavorDetails: flavors.map((f)=>`${f.name} (${f.quantity}x)`).join(\", \"),\n                total,\n                flavors\n            };\n        }));\n        const subtotal = items.reduce((sum, item)=>sum + item.total, 0);\n        const itemCount = items.reduce((sum, item)=>sum + item.quantity, 0);\n        // Handle delivery address\n        let deliveryAddress;\n        let deliveryFee = 0;\n        let customerInfo;\n        if (session?.user) {\n            // Registered user\n            if (useNewAddress && newAddress) {\n                // Use new address\n                const zoneResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(\"SELECT z.delivery_fee, c.name as city_name, z.name as zone_name FROM zones z JOIN cities c ON z.city_id = c.id WHERE z.id = ?\", [\n                    newAddress.zone_id\n                ]);\n                if (Array.isArray(zoneResult) && zoneResult.length > 0) {\n                    const zone = zoneResult[0];\n                    deliveryFee = zone.delivery_fee;\n                    deliveryAddress = {\n                        street_address: newAddress.street_address,\n                        additional_info: newAddress.additional_info,\n                        city_name: zone.city_name,\n                        zone_name: zone.zone_name,\n                        delivery_fee: zone.delivery_fee\n                    };\n                }\n                // Save new address if requested\n                if (saveNewAddress && newAddress) {\n                    console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Saving new address for user:\", session.user.email);\n                    // Get customer ID\n                    const customerResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(\"SELECT id FROM customers WHERE email = ?\", [\n                        session.user.email\n                    ]);\n                    const customerArray = Array.isArray(customerResult) ? customerResult : customerResult ? [\n                        customerResult\n                    ] : [];\n                    if (customerArray.length > 0) {\n                        const customerId = customerArray[0].id;\n                        // Check if this address already exists for this customer\n                        const existingAddressResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(`SELECT id FROM customer_addresses \n               WHERE customer_id = ? \n               AND street_address = ? \n               AND city_id = ? \n               AND zone_id = ? \n               AND (additional_info = ? OR (additional_info IS NULL AND ? IS NULL))`, [\n                            customerId,\n                            newAddress.street_address,\n                            newAddress.city_id,\n                            newAddress.zone_id,\n                            newAddress.additional_info || null,\n                            newAddress.additional_info || null\n                        ]);\n                        const existingAddressArray = Array.isArray(existingAddressResult) ? existingAddressResult : existingAddressResult ? [\n                            existingAddressResult\n                        ] : [];\n                        if (existingAddressArray.length === 0) {\n                            // Address doesn't exist, save it\n                            const insertResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(\"INSERT INTO customer_addresses (customer_id, street_address, additional_info, city_id, zone_id, is_default) VALUES (?, ?, ?, ?, ?, ?)\", [\n                                customerId,\n                                newAddress.street_address,\n                                newAddress.additional_info || null,\n                                newAddress.city_id,\n                                newAddress.zone_id,\n                                false // Don't set as default automatically\n                            ]);\n                            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - New address saved with ID:\", insertResult.insertId);\n                        } else {\n                            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Address already exists, skipping save\");\n                        }\n                    } else {\n                        console.error(\"❌ [DEBUG] Confirm API - Customer not found for email:\", session.user.email);\n                    }\n                }\n            } else if (selectedAddressId) {\n                // Use selected saved address\n                console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Looking up saved address ID:\", selectedAddressId);\n                console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - User email:\", session.user.email);\n                const addressResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(`SELECT ca.street_address, ca.additional_info, c.name as city_name, z.name as zone_name, z.delivery_fee\n           FROM customer_addresses ca\n           JOIN cities c ON ca.city_id = c.id\n           JOIN zones z ON ca.zone_id = z.id\n           WHERE ca.id = ? AND ca.customer_id = (SELECT id FROM customers WHERE email = ?)`, [\n                    selectedAddressId,\n                    session.user.email\n                ]);\n                console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Address lookup result:\", addressResult);\n                // Handle both array and single object results\n                const addressArray = Array.isArray(addressResult) ? addressResult : addressResult ? [\n                    addressResult\n                ] : [];\n                if (addressArray.length > 0) {\n                    const address = addressArray[0];\n                    deliveryFee = address.delivery_fee;\n                    deliveryAddress = {\n                        street_address: address.street_address,\n                        additional_info: address.additional_info,\n                        city_name: address.city_name,\n                        zone_name: address.zone_name,\n                        delivery_fee: address.delivery_fee\n                    };\n                    console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Delivery address set:\", deliveryAddress);\n                } else {\n                    console.error(\"❌ [DEBUG] Confirm API - No address found for ID:\", selectedAddressId);\n                }\n            }\n            // Get customer info\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Looking up customer info for email:\", session.user.email);\n            const userResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(\"SELECT first_name, last_name, email, phone FROM customers WHERE email = ?\", [\n                session.user.email\n            ]);\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Customer lookup result:\", userResult);\n            // Handle both array and single object results\n            const userArray = Array.isArray(userResult) ? userResult : userResult ? [\n                userResult\n            ] : [];\n            if (userArray.length > 0) {\n                const user = userArray[0];\n                customerInfo = {\n                    name: `${user.first_name} ${user.last_name}`,\n                    email: user.email,\n                    phone: user.phone\n                };\n                console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Customer info set:\", customerInfo);\n            } else {\n                console.error(\"❌ [DEBUG] Confirm API - No customer found for email:\", session.user.email);\n            }\n        } else {\n            // Guest user\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Processing guest user\");\n            if (!guestData) {\n                console.error(\"❌ [DEBUG] Confirm API - No guest data provided\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    message: \"Guest data is required\",\n                    error: \"Missing guest information\"\n                }, {\n                    status: 400\n                });\n            }\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Guest data received:\", JSON.stringify(guestData, null, 2));\n            // Convert zone to number if it's a string\n            const zoneId = typeof guestData.zone === \"string\" ? parseInt(guestData.zone, 10) : guestData.zone;\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Zone ID (original):\", guestData.zone);\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Zone ID (converted):\", zoneId);\n            if (isNaN(zoneId)) {\n                console.error(\"❌ [DEBUG] Confirm API - Invalid zone ID:\", guestData.zone);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    message: \"Invalid zone ID\",\n                    error: \"Zone ID must be a valid number\"\n                }, {\n                    status: 400\n                });\n            }\n            // Get delivery fee for guest address\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Querying zone with ID:\", zoneId);\n            const zoneResult = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_4__.databaseService.query(\"SELECT z.delivery_fee, c.name as city_name, z.name as zone_name FROM zones z JOIN cities c ON z.city_id = c.id WHERE z.id = ?\", [\n                zoneId\n            ]);\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Zone query result:\", zoneResult);\n            // Handle both array and single object results\n            const zoneArray = Array.isArray(zoneResult) ? zoneResult : zoneResult ? [\n                zoneResult\n            ] : [];\n            if (zoneArray.length > 0) {\n                const zone = zoneArray[0];\n                deliveryFee = zone.delivery_fee;\n                deliveryAddress = {\n                    street_address: guestData.address,\n                    additional_info: guestData.additionalInfo,\n                    city_name: zone.city_name,\n                    zone_name: zone.zone_name,\n                    delivery_fee: zone.delivery_fee\n                };\n                console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Delivery address set:\", deliveryAddress);\n            } else {\n                console.error(\"❌ [DEBUG] Confirm API - Zone not found for ID:\", zoneId);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    message: \"Invalid zone selected\",\n                    error: \"Zone not found in database\"\n                }, {\n                    status: 400\n                });\n            }\n            customerInfo = {\n                name: guestData.name,\n                email: guestData.email,\n                phone: guestData.phone\n            };\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - Customer info set:\", customerInfo);\n        }\n        if (!deliveryAddress) {\n            console.error(\"❌ [DEBUG] Confirm API - No delivery address set\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: \"Delivery address is required\",\n                error: \"No valid delivery address provided\"\n            }, {\n                status: 400\n            });\n        }\n        if (!customerInfo) {\n            console.error(\"❌ [DEBUG] Confirm API - No customer info set\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                message: \"Customer information is required\",\n                error: \"Missing customer information\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Confirm API - All validations passed, proceeding with order confirmation\");\n        const total = subtotal + Number(deliveryFee);\n        console.log(`🔍 [DEBUG] Confirm API - Final calculations:`);\n        console.log(`  - Subtotal: ${subtotal}`);\n        console.log(`  - Delivery fee: ${deliveryFee}`);\n        console.log(`  - Total: ${total}`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Order confirmed successfully\",\n            data: {\n                cart: {\n                    items,\n                    subtotal,\n                    deliveryFee: Number(deliveryFee),\n                    total,\n                    itemCount\n                },\n                deliveryAddress,\n                customerInfo\n            }\n        });\n    } catch (error) {\n        console.error(\"Error confirming order:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            message: \"Failed to confirm order\",\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2NoZWNrb3V0L2NvbmZpcm0vcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXdEO0FBQ1g7QUFDTjtBQUNIO0FBQ2E7QUFDZ0I7QUFDRTtBQThFbkUsMkRBQTJEO0FBQzNELGVBQWVRO0lBQ2IsTUFBTUMsY0FBY1AscURBQU9BO0lBQzNCLElBQUlRLFNBQVNELFlBQVlFLEdBQUcsQ0FBQyxZQUFZQztJQUV6QyxJQUFJLENBQUNGLFFBQVE7UUFDWCxNQUFNRyxZQUFZVCxnREFBTUE7UUFDeEIsTUFBTVUsU0FBUyxNQUFNUiwwRUFBZUEsQ0FBQ1MsS0FBSyxDQUN4QyxrRkFDQTtZQUFDRjtTQUFVO1FBR2JILFNBQVNJLE9BQU9FLFFBQVEsQ0FBQ0MsUUFBUTtRQUNqQ0MsY0FBY1I7UUFDZFMsUUFBUUMsR0FBRyxDQUFDLHFCQUFxQlY7SUFDbkMsT0FBTztRQUNMLE1BQU1XLGFBQWEsTUFBTWYsMEVBQWVBLENBQUNTLEtBQUssQ0FDNUMsMERBQ0E7WUFBQ0w7U0FBTztRQUdWLElBQUksQ0FBQ1ksTUFBTUMsT0FBTyxDQUFDRixlQUFlQSxXQUFXRyxNQUFNLEtBQUssR0FBRztZQUN6RCxNQUFNWCxZQUFZVCxnREFBTUE7WUFDeEIsTUFBTVUsU0FBUyxNQUFNUiwwRUFBZUEsQ0FBQ1MsS0FBSyxDQUN4QyxrRkFDQTtnQkFBQ0Y7YUFBVTtZQUdiSCxTQUFTSSxPQUFPRSxRQUFRLENBQUNDLFFBQVE7WUFDakNDLGNBQWNSO1lBQ2RTLFFBQVFDLEdBQUcsQ0FBQyx1Q0FBdUNWO1FBQ3JEO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUO0FBRUEsU0FBU1EsY0FBY1IsTUFBYztJQUNuQyxNQUFNRCxjQUFjUCxxREFBT0E7SUFDM0JPLFlBQVlnQixHQUFHLENBQUMsV0FBV2YsUUFBUTtRQUNqQ2dCLFVBQVU7UUFDVkMsUUFBUUMsa0JBQXlCO1FBQ2pDQyxVQUFVO1FBQ1ZDLFFBQVEsSUFBSSxLQUFLLEtBQUs7SUFDeEI7QUFDRjtBQUVPLGVB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TztZQUNULEdBQUc7Z0JBQUVHLFFBQVE7WUFBSTtRQUNuQjtRQUVBOUIsUUFBUUMsR0FBRyxDQUFDO1FBRVosTUFBTStFLFFBQVFNLFdBQVdpQyxPQUFPOUI7UUFFaEN6RixRQUFRQyxHQUFHLENBQUMsQ0FBQyw0Q0FBNEMsQ0FBQztRQUMxREQsUUFBUUMsR0FBRyxDQUFDLENBQUMsY0FBYyxFQUFFcUYsU0FBUyxDQUFDO1FBQ3ZDdEYsUUFBUUMsR0FBRyxDQUFDLENBQUMsa0JBQWtCLEVBQUV3RixZQUFZLENBQUM7UUFDOUN6RixRQUFRQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUrRSxNQUFNLENBQUM7UUFFakMsT0FBT25HLHFEQUFZQSxDQUFDbUMsSUFBSSxDQUFDO1lBQ3ZCWSxTQUFTO1lBQ1RDLFNBQVM7WUFDVDJGLE1BQU07Z0JBQ0pDLE1BQU07b0JBQ0puRDtvQkFDQWdCO29CQUNBRyxhQUFhOEIsT0FBTzlCO29CQUNwQlQ7b0JBQ0FPO2dCQUNGO2dCQUNBQztnQkFDQUU7WUFDRjtRQUNGO0lBRUYsRUFBRSxPQUFPL0QsT0FBTztRQUNkM0IsUUFBUTJCLEtBQUssQ0FBQywyQkFBMkJBO1FBQ3pDLE9BQU85QyxxREFBWUEsQ0FBQ21DLElBQUksQ0FBQztZQUN2QlksU0FBUztZQUNUQyxTQUFTO1lBQ1RGLE9BQU87UUFDVCxHQUFHO1lBQUVHLFFBQVE7UUFBSTtJQUNuQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J1bWJsZWQtd2Vic2l0ZS8uL2FwcC9hcGkvY2hlY2tvdXQvY29uZmlybS9yb3V0ZS50cz9iYzg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBnZXRTZXJ2ZXJTZXNzaW9uIH0gZnJvbSAnbmV4dC1hdXRoJztcbmltcG9ydCB7IGNvb2tpZXMgfSBmcm9tICduZXh0L2hlYWRlcnMnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBhdXRoT3B0aW9ucyB9IGZyb20gJ0AvbGliL2F1dGgtb3B0aW9ucyc7XG5pbXBvcnQgeyBkYXRhYmFzZVNlcnZpY2UgfSBmcm9tICdAL2xpYi9zZXJ2aWNlcy9kYXRhYmFzZVNlcnZpY2UnO1xuaW1wb3J0IHsgb3JkZXJNb2RlU2VydmljZSB9IGZyb20gJ0AvbGliL3NlcnZpY2VzL29yZGVyTW9kZVNlcnZpY2UnO1xuXG5pbnRlcmZhY2UgQ2hlY2tvdXRDb25maXJtUmVxdWVzdCB7XG4gIGNhcnRJZD86IHN0cmluZztcbiAgZ3Vlc3REYXRhPzoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBlbWFpbDogc3RyaW5nO1xuICAgIHBob25lOiBzdHJpbmc7XG4gICAgYWRkcmVzczogc3RyaW5nO1xuICAgIGNpdHk6IHN0cmluZztcbiAgICB6b25lOiBzdHJpbmc7XG4gICAgYWRkaXRpb25hbEluZm8/OiBzdHJpbmc7XG4gIH07XG4gIGd1ZXN0Pzoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBlbWFpbDogc3RyaW5nO1xuICAgIHBob25lOiBzdHJpbmc7XG4gICAgYWRkcmVzczogc3RyaW5nO1xuICAgIGNpdHk6IHN0cmluZztcbiAgICB6b25lOiBzdHJpbmc7XG4gICAgYWRkaXRpb25hbEluZm8/OiBzdHJpbmc7XG4gIH07XG4gIHNlbGVjdGVkQWRkcmVzc0lkPzogbnVtYmVyO1xuICB1c2VOZXdBZGRyZXNzPzogYm9vbGVhbjtcbiAgbmV3QWRkcmVzcz86IHtcbiAgICBzdHJlZXRfYWRkcmVzczogc3RyaW5nO1xuICAgIGFkZGl0aW9uYWxfaW5mbz86IHN0cmluZztcbiAgICBjaXR5X2lkOiBudW1iZXI7XG4gICAgem9uZV9pZDogbnVtYmVyO1xuICB9O1xuICBzYXZlTmV3QWRkcmVzcz86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBDaGVja291dENvbmZpcm1SZXNwb25zZSB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgZGF0YT86IHtcbiAgICBjYXJ0OiB7XG4gICAgICBpdGVtczogQXJyYXk8e1xuICAgICAgICBpZDogbnVtYmVyO1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGJhc2VQcmljZTogbnVtYmVyO1xuICAgICAgICBxdWFudGl0eTogbnVtYmVyO1xuICAgICAgICBpc1BhY2s6IGJvb2xlYW47XG4gICAgICAgIHBhY2tTaXplOiBzdHJpbmc7XG4gICAgICAgIGltYWdlVXJsOiBzdHJpbmc7XG4gICAgICAgIGNvdW50OiBudW1iZXI7XG4gICAgICAgIGZsYXZvckRldGFpbHM6IHN0cmluZztcbiAgICAgICAgdG90YWw6IG51bWJlcjtcbiAgICAgICAgZmxhdm9yczogQXJyYXk8e1xuICAgICAgICAgIGlkOiBudW1iZXI7XG4gICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICAgIHF1YW50aXR5OiBudW1iZXI7XG4gICAgICAgICAgcHJpY2U6IG51bWJlcjtcbiAgICAgICAgICBzaXplOiBzdHJpbmc7XG4gICAgICAgIH0+O1xuICAgICAgfT47XG4gICAgICBzdWJ0b3RhbDogbnVtYmVyO1xuICAgICAgZGVsaXZlcnlGZWU6IG51bWJlcjtcbiAgICAgIHRvdGFsOiBudW1iZXI7XG4gICAgICBpdGVtQ291bnQ6IG51bWJlcjtcbiAgICB9O1xuICAgIGRlbGl2ZXJ5QWRkcmVzczoge1xuICAgICAgc3RyZWV0X2FkZHJlc3M6IHN0cmluZztcbiAgICAgIGFkZGl0aW9uYWxfaW5mbz86IHN0cmluZztcbiAgICAgIGNpdHlfbmFtZTogc3RyaW5nO1xuICAgICAgem9uZV9uYW1lOiBzdHJpbmc7XG4gICAgICBkZWxpdmVyeV9mZWU6IG51bWJlcjtcbiAgICB9O1xuICAgIGN1c3RvbWVySW5mbzoge1xuICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgZW1haWw6IHN0cmluZztcbiAgICAgIHBob25lOiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgb3IgY3JlYXRlIGNhcnQgKHNhbWUgYXMgY2FydCBBUEkpXG5hc3luYyBmdW5jdGlvbiBnZXRPckNyZWF0ZUNhcnQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgY29va2llU3RvcmUgPSBjb29raWVzKCk7XG4gIGxldCBjYXJ0SWQgPSBjb29raWVTdG9yZS5nZXQoJ2NhcnRfaWQnKT8udmFsdWU7XG5cbiAgaWYgKCFjYXJ0SWQpIHtcbiAgICBjb25zdCBzZXNzaW9uSWQgPSB1dWlkdjQoKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYXRhYmFzZVNlcnZpY2UucXVlcnk8eyBpbnNlcnRJZDogbnVtYmVyIH0+KFxuICAgICAgJ0lOU0VSVCBJTlRPIGNhcnRzIChzZXNzaW9uX2lkLCBzdGF0dXMsIGNyZWF0ZWRfYXQpIFZBTFVFUyAoPywgXCJhY3RpdmVcIiwgTk9XKCkpJyxcbiAgICAgIFtzZXNzaW9uSWRdXG4gICAgKTtcbiAgICBcbiAgICBjYXJ0SWQgPSByZXN1bHQuaW5zZXJ0SWQudG9TdHJpbmcoKTtcbiAgICBzZXRDYXJ0Q29va2llKGNhcnRJZCk7XG4gICAgY29uc29sZS5sb2coJ0NyZWF0ZWQgbmV3IGNhcnQ6JywgY2FydElkKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjYXJ0RXhpc3RzID0gYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLnF1ZXJ5KFxuICAgICAgJ1NFTEVDVCAqIEZST00gY2FydHMgV0hFUkUgaWQgPSA/IEFORCBzdGF0dXMgPSBcImFjdGl2ZVwiJyxcbiAgICAgIFtjYXJ0SWRdXG4gICAgKTtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShjYXJ0RXhpc3RzKSB8fCBjYXJ0RXhpc3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3Qgc2Vzc2lvbklkID0gdXVpZHY0KCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYXRhYmFzZVNlcnZpY2UucXVlcnk8eyBpbnNlcnRJZDogbnVtYmVyIH0+KFxuICAgICAgICAnSU5TRVJUIElOVE8gY2FydHMgKHNlc3Npb25faWQsIHN0YXR1cywgY3JlYXRlZF9hdCkgVkFMVUVTICg/LCBcImFjdGl2ZVwiLCBOT1coKSknLFxuICAgICAgICBbc2Vzc2lvbklkXVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgY2FydElkID0gcmVzdWx0Lmluc2VydElkLnRvU3RyaW5nKCk7XG4gICAgICBzZXRDYXJ0Q29va2llKGNhcnRJZCk7XG4gICAgICBjb25zb2xlLmxvZygnQ3JlYXRlZCBuZXcgY2FydCAob2xkIG9uZSBpbnZhbGlkKTonLCBjYXJ0SWQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYXJ0SWQ7XG59XG5cbmZ1bmN0aW9uIHNldENhcnRDb29raWUoY2FydElkOiBzdHJpbmcpIHtcbiAgY29uc3QgY29va2llU3RvcmUgPSBjb29raWVzKCk7XG4gIGNvb2tpZVN0b3JlLnNldCgnY2FydF9pZCcsIGNhcnRJZCwge1xuICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyxcbiAgICBzYW1lU2l0ZTogJ3N0cmljdCcsXG4gICAgbWF4QWdlOiA3ICogMjQgKiA2MCAqIDYwXG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPENoZWNrb3V0Q29uZmlybVJlc3BvbnNlPj4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgY2FsbGVkJylcbiAgICBjb25zdCBzZXNzaW9uID0gYXdhaXQgZ2V0U2VydmVyU2Vzc2lvbihhdXRoT3B0aW9ucyk7XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKSBhcyBDaGVja291dENvbmZpcm1SZXF1ZXN0O1xuICAgIFxuICAgIC8vIEhhbmRsZSBib3RoIGZpZWxkIG5hbWVzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgY29uc3QgZ3Vlc3REYXRhID0gcmVxdWVzdEJvZHkuZ3Vlc3REYXRhIHx8IHJlcXVlc3RCb2R5Lmd1ZXN0O1xuICAgIGNvbnN0IHsgc2VsZWN0ZWRBZGRyZXNzSWQsIHVzZU5ld0FkZHJlc3MsIG5ld0FkZHJlc3MsIHNhdmVOZXdBZGRyZXNzIH0gPSByZXF1ZXN0Qm9keTtcbiAgICBcbiAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gUmVxdWVzdCBib2R5OicsIEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5LCBudWxsLCAyKSlcbiAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gR3Vlc3QgZGF0YTonLCBKU09OLnN0cmluZ2lmeShndWVzdERhdGEsIG51bGwsIDIpKVxuICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBTYXZlIE5ldyBBZGRyZXNzOicsIHNhdmVOZXdBZGRyZXNzKVxuICAgIFxuICAgIGNvbnN0IGNhcnRJZCA9IGF3YWl0IGdldE9yQ3JlYXRlQ2FydCgpO1xuXG4gICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIFNlc3Npb246Jywgc2Vzc2lvbj8udXNlcj8uZW1haWwpXG4gICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIFNlbGVjdGVkIEFkZHJlc3MgSUQ6Jywgc2VsZWN0ZWRBZGRyZXNzSWQpXG4gICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIFVzZSBOZXcgQWRkcmVzczonLCB1c2VOZXdBZGRyZXNzKVxuICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBDYXJ0IElEOicsIGNhcnRJZClcblxuICAgIC8vIFZhbGlkYXRlIGNhcnRcbiAgICBpZiAoIWNhcnRJZCkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIFtERUJVR10gQ29uZmlybSBBUEkgLSBObyBjYXJ0IElEIGZvdW5kJylcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAnQ2FydCBub3QgZm91bmQnLFxuICAgICAgICBlcnJvcjogJ05vIGFjdGl2ZSBjYXJ0IGZvdW5kJ1xuICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gRmV0Y2hpbmcgY2FydCBpdGVtcycpXG4gICAgLy8gRmV0Y2ggYW5kIHZhbGlkYXRlIGNhcnQgaXRlbXMgLSB1c2luZyB0aGUgc2FtZSBxdWVyeSBzdHJ1Y3R1cmUgYXMgY2FydCBBUElcbiAgICBjb25zdCBjYXJ0UmVzdWx0ID0gYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLnF1ZXJ5KFxuICAgICAgYFNFTEVDVCBcbiAgICAgICAgY2kuaWQsXG4gICAgICAgIGNpLnF1YW50aXR5LFxuICAgICAgICBjaS5wcm9kdWN0X2lkLFxuICAgICAgICBwLm5hbWUgYXMgcHJvZHVjdF9uYW1lLFxuICAgICAgICBwLmlzX3BhY2ssXG4gICAgICAgIHAuYmFzZV9wcmljZSxcbiAgICAgICAgcC5mbGF2b3Jfc2l6ZSBhcyBzaXplLFxuICAgICAgICBwLmltYWdlX3VybCxcbiAgICAgICAgcC5jb3VudCxcbiAgICAgICAgcC5zdG9ja19xdWFudGl0eVxuICAgICAgIEZST00gY2FydF9pdGVtcyBjaVxuICAgICAgIEpPSU4gcHJvZHVjdHMgcCBPTiBjaS5wcm9kdWN0X2lkID0gcC5pZFxuICAgICAgIFdIRVJFIGNpLmNhcnRfaWQgPSA/IEFORCBwLmlzX2FjdGl2ZSA9IHRydWVcbiAgICAgICBPUkRFUiBCWSBjaS5pZCBERVNDYCxcbiAgICAgIFtjYXJ0SWRdXG4gICAgKTtcblxuICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBDYXJ0IHJlc3VsdDonLCBjYXJ0UmVzdWx0KVxuXG4gICAgLy8gSGFuZGxlIGJvdGggYXJyYXkgYW5kIHNpbmdsZSBvYmplY3QgcmVzdWx0cyBsaWtlIGNhcnQgQVBJIGRvZXNcbiAgICBjb25zdCBjYXJ0SXRlbXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY2FydFJlc3VsdCkgPyBjYXJ0UmVzdWx0IDogKGNhcnRSZXN1bHQgPyBbY2FydFJlc3VsdF0gOiBbXSk7XG5cbiAgICBpZiAoY2FydEl0ZW1zQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgW0RFQlVHXSBDb25maXJtIEFQSSAtIENhcnQgaXMgZW1wdHknKVxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICdDYXJ0IGlzIGVtcHR5JyxcbiAgICAgICAgZXJyb3I6ICdObyBpdGVtcyBmb3VuZCBpbiBjYXJ0J1xuICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBzdG9jayBhdmFpbGFiaWxpdHkgdXNpbmcgb3JkZXIgbW9kZSBzZXJ2aWNlXG4gICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIENoZWNraW5nIGNhcnQgYXZhaWxhYmlsaXR5IHdpdGggb3JkZXIgbW9kZSBzZXJ2aWNlJylcbiAgICBcbiAgICAvLyBQcmVwYXJlIGNhcnQgaXRlbXMgZm9yIGF2YWlsYWJpbGl0eSBjaGVja1xuICAgIGNvbnN0IGNhcnRJdGVtc0ZvckNoZWNrID0gYXdhaXQgUHJvbWlzZS5hbGwoY2FydEl0ZW1zQXJyYXkubWFwKGFzeW5jIChpdGVtOiBhbnkpID0+IHtcbiAgICAgIGxldCBmbGF2b3JzOiBBcnJheTx7IGlkOiBudW1iZXI7IHF1YW50aXR5OiBudW1iZXI7IG5hbWU/OiBzdHJpbmcgfT4gPSBbXTtcbiAgICAgIFxuICAgICAgLy8gRmV0Y2ggZmxhdm9ycyBmb3IgcGFjayBpdGVtc1xuICAgICAgaWYgKGl0ZW0uaXNfcGFjaykge1xuICAgICAgICBjb25zdCBmbGF2b3JSZXN1bHQgPSBhd2FpdCBkYXRhYmFzZVNlcnZpY2UucXVlcnkoXG4gICAgICAgICAgJ1NFTEVDVCBmLmlkLCBmLm5hbWUsIGNpZi5xdWFudGl0eSBGUk9NIGNhcnRfaXRlbV9mbGF2b3JzIGNpZiBKT0lOIGZsYXZvcnMgZiBPTiBjaWYuZmxhdm9yX2lkID0gZi5pZCBXSEVSRSBjaWYuY2FydF9pdGVtX2lkID0gPycsXG4gICAgICAgICAgW2l0ZW0uaWRdXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmbGF2b3JSZXN1bHQpKSB7XG4gICAgICAgICAgZmxhdm9ycyA9IGZsYXZvclJlc3VsdC5tYXAoKGZsYXZvcjogYW55KSA9PiAoe1xuICAgICAgICAgICAgaWQ6IGZsYXZvci5pZCxcbiAgICAgICAgICAgIG5hbWU6IGZsYXZvci5uYW1lLFxuICAgICAgICAgICAgcXVhbnRpdHk6IGZsYXZvci5xdWFudGl0eVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgcHJvZHVjdElkOiBpdGVtLnByb2R1Y3RfaWQsXG4gICAgICAgIHF1YW50aXR5OiBpdGVtLnF1YW50aXR5LFxuICAgICAgICBpc1BhY2s6IGl0ZW0uaXNfcGFjayxcbiAgICAgICAgcGFja1NpemU6IGl0ZW0uc2l6ZSxcbiAgICAgICAgcHJvZHVjdE5hbWU6IGl0ZW0ucHJvZHVjdF9uYW1lLFxuICAgICAgICBmbGF2b3JzXG4gICAgICB9O1xuICAgIH0pKTtcblxuICAgIGNvbnN0IGF2YWlsYWJpbGl0eUNoZWNrID0gYXdhaXQgb3JkZXJNb2RlU2VydmljZS5jaGVja0NhcnRBdmFpbGFiaWxpdHkoY2FydEl0ZW1zRm9yQ2hlY2spO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBBdmFpbGFiaWxpdHkgY2hlY2sgcmVzdWx0OicsIGF2YWlsYWJpbGl0eUNoZWNrKTtcblxuICAgIGlmICghYXZhaWxhYmlsaXR5Q2hlY2suaXNBdmFpbGFibGUpIHtcbiAgICAgIC8vIEJ1aWxkIGEgZGV0YWlsZWQgZXJyb3IgbWVzc2FnZSB3aXRoIHNwZWNpZmljIGl0ZW0gbmFtZXNcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSAnU29tZSBpdGVtcyBpbiB5b3VyIGNhcnQgYXJlIGN1cnJlbnRseSBvdXQgb2Ygc3RvY2s6XFxuXFxuJztcbiAgICAgIFxuICAgICAgaWYgKGF2YWlsYWJpbGl0eUNoZWNrLm91dE9mU3RvY2tJdGVtcyAmJiBhdmFpbGFiaWxpdHlDaGVjay5vdXRPZlN0b2NrSXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBwcm9kdWN0SXRlbXMgPSBhdmFpbGFiaWxpdHlDaGVjay5vdXRPZlN0b2NrSXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS50eXBlID09PSAncHJvZHVjdCcpO1xuICAgICAgICBjb25zdCBmbGF2b3JJdGVtcyA9IGF2YWlsYWJpbGl0eUNoZWNrLm91dE9mU3RvY2tJdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnR5cGUgPT09ICdmbGF2b3InKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwcm9kdWN0SXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGVycm9yTWVzc2FnZSArPSAnKipQcm9kdWN0cyBvdXQgb2Ygc3RvY2s6KipcXG4nO1xuICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBwcm9kdWN0SXRlbXMpIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGFjdHVhbCBwcm9kdWN0IG5hbWUgZnJvbSBjYXJ0IGl0ZW1zXG4gICAgICAgICAgICBjb25zdCBjYXJ0SXRlbSA9IGNhcnRJdGVtc0FycmF5LmZpbmQoY2kgPT4gY2kucHJvZHVjdF9pZCA9PT0gaXRlbS5pZCk7XG4gICAgICAgICAgICBjb25zdCBwcm9kdWN0TmFtZSA9IGNhcnRJdGVtID8gY2FydEl0ZW0ucHJvZHVjdF9uYW1lIDogYFByb2R1Y3QgJHtpdGVtLmlkfWA7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gYOKAoiAke3Byb2R1Y3ROYW1lfSAoJHtpdGVtLnJlcXVlc3RlZFF1YW50aXR5fSByZXF1ZXN0ZWQsICR7aXRlbS5hdmFpbGFibGVRdWFudGl0eX0gYXZhaWxhYmxlKVxcbmA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVycm9yTWVzc2FnZSArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGZsYXZvckl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gJyoqRmxhdm9ycyBvdXQgb2Ygc3RvY2s6KipcXG4nO1xuICAgICAgICAgIC8vIEdldCBhbGwgZmxhdm9yIElEcyB0byBmZXRjaCBuYW1lcyBpbiBiYXRjaFxuICAgICAgICAgIGNvbnN0IGZsYXZvcklkcyA9IGZsYXZvckl0ZW1zLm1hcChpdGVtID0+IGl0ZW0uaWQpO1xuICAgICAgICAgIGNvbnN0IGZsYXZvclJlc3VsdCA9IGF3YWl0IGRhdGFiYXNlU2VydmljZS5xdWVyeShcbiAgICAgICAgICAgIGBTRUxFQ1QgaWQsIG5hbWUgRlJPTSBmbGF2b3JzIFdIRVJFIGlkIElOICgke2ZsYXZvcklkcy5qb2luKCcsJyl9KWBcbiAgICAgICAgICApO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZsYXZvclJlc3VsdCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBmbGF2b3JJdGVtcykge1xuICAgICAgICAgICAgICBjb25zdCBmbGF2b3IgPSBmbGF2b3JSZXN1bHQuZmluZChmID0+IGYuaWQgPT09IGl0ZW0uaWQpO1xuICAgICAgICAgICAgICBjb25zdCBmbGF2b3JOYW1lID0gZmxhdm9yID8gZmxhdm9yLm5hbWUgOiBgRmxhdm9yICR7aXRlbS5pZH1gO1xuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gYOKAoiAke2ZsYXZvck5hbWV9ICgke2l0ZW0ucmVxdWVzdGVkUXVhbnRpdHl9IHJlcXVlc3RlZCwgJHtpdGVtLmF2YWlsYWJsZVF1YW50aXR5fSBhdmFpbGFibGUpXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgaWYgYmF0Y2ggcXVlcnkgZmFpbHNcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBmbGF2b3JJdGVtcykge1xuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgKz0gYOKAoiBGbGF2b3IgJHtpdGVtLmlkfSAoJHtpdGVtLnJlcXVlc3RlZFF1YW50aXR5fSByZXF1ZXN0ZWQsICR7aXRlbS5hdmFpbGFibGVRdWFudGl0eX0gYXZhaWxhYmxlKVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVycm9yTWVzc2FnZSArPSAnXFxuJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZXJyb3JNZXNzYWdlICs9ICdQbGVhc2UgcmVtb3ZlIHRoZXNlIGl0ZW1zIGZyb20geW91ciBjYXJ0IG9yIGNvbnRhY3QgdXMgZm9yIGF2YWlsYWJpbGl0eSB1cGRhdGVzLic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSAnU29tZSBpdGVtcyBhcmUgbm90IGF2YWlsYWJsZSBmb3Igb3JkZXJpbmcuIFBsZWFzZSBjaGVjayB5b3VyIGNhcnQgYW5kIHRyeSBhZ2Fpbi4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZTogJ0l0ZW1zIG91dCBvZiBzdG9jaycsXG4gICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIG91dE9mU3RvY2tJdGVtczogYXZhaWxhYmlsaXR5Q2hlY2sub3V0T2ZTdG9ja0l0ZW1zXG4gICAgICB9LCB7IHN0YXR1czogNDAwIH0pO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgY2FydCBpdGVtcyB3aXRoIGZsYXZvcnNcbiAgICBjb25zdCBpdGVtcyA9IGF3YWl0IFByb21pc2UuYWxsKGNhcnRJdGVtc0FycmF5Lm1hcChhc3luYyAoaXRlbTogYW55KSA9PiB7XG4gICAgICBsZXQgZmxhdm9yczogQXJyYXk8e1xuICAgICAgICBpZDogbnVtYmVyO1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIHF1YW50aXR5OiBudW1iZXI7XG4gICAgICAgIHByaWNlOiBudW1iZXI7XG4gICAgICAgIHNpemU6IHN0cmluZztcbiAgICAgIH0+ID0gW107XG5cbiAgICAgIC8vIEZldGNoIGZsYXZvcnMgZm9yIHBhY2sgaXRlbXNcbiAgICAgIGlmIChpdGVtLmlzX3BhY2spIHtcbiAgICAgICAgY29uc3QgZmxhdm9yUmVzdWx0ID0gYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLnF1ZXJ5KFxuICAgICAgICAgIGBTRUxFQ1QgXG4gICAgICAgICAgICBmLmlkLCBcbiAgICAgICAgICAgIGYubmFtZSwgXG4gICAgICAgICAgICBjaWYucXVhbnRpdHksXG4gICAgICAgICAgICBmLm1pbmlfcHJpY2UsXG4gICAgICAgICAgICBmLm1lZGl1bV9wcmljZSxcbiAgICAgICAgICAgIGYubGFyZ2VfcHJpY2VcbiAgICAgICAgICAgRlJPTSBjYXJ0X2l0ZW1fZmxhdm9ycyBjaWZcbiAgICAgICAgICAgSk9JTiBmbGF2b3JzIGYgT04gY2lmLmZsYXZvcl9pZCA9IGYuaWRcbiAgICAgICAgICAgV0hFUkUgY2lmLmNhcnRfaXRlbV9pZCA9ID9gLFxuICAgICAgICAgIFtpdGVtLmlkXVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZsYXZvclJlc3VsdCkpIHtcbiAgICAgICAgICBmbGF2b3JzID0gZmxhdm9yUmVzdWx0Lm1hcCgoZmxhdm9yOiBhbnkpID0+ICh7XG4gICAgICAgICAgICBpZDogZmxhdm9yLmlkLFxuICAgICAgICAgICAgbmFtZTogZmxhdm9yLm5hbWUsXG4gICAgICAgICAgICBxdWFudGl0eTogZmxhdm9yLnF1YW50aXR5LFxuICAgICAgICAgICAgcHJpY2U6IGl0ZW0uc2l6ZSA9PT0gJ0xhcmdlJyA/IGZsYXZvci5sYXJnZV9wcmljZSA6IFxuICAgICAgICAgICAgICAgICAgIGl0ZW0uc2l6ZSA9PT0gJ01lZGl1bScgPyBmbGF2b3IubWVkaXVtX3ByaWNlIDogZmxhdm9yLm1pbmlfcHJpY2UsXG4gICAgICAgICAgICBzaXplOiBpdGVtLnNpemVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ2FsY3VsYXRlIHRvdGFsIGZvciB0aGlzIGl0ZW1cbiAgICAgIGNvbnN0IGJhc2VUb3RhbCA9IGl0ZW0uYmFzZV9wcmljZSAqIGl0ZW0ucXVhbnRpdHk7XG4gICAgICBjb25zdCBmbGF2b3JUb3RhbCA9IGZsYXZvcnMucmVkdWNlKChzdW0sIGZsYXZvcikgPT4gc3VtICsgKGZsYXZvci5wcmljZSAqIGZsYXZvci5xdWFudGl0eSksIDApO1xuICAgICAgY29uc3QgdG90YWwgPSBiYXNlVG90YWwgKyBmbGF2b3JUb3RhbDtcblxuICAgICAgY29uc29sZS5sb2coYPCflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIEl0ZW0gJHtpdGVtLmlkfSB0b3RhbCBjYWxjdWxhdGlvbjpgKVxuICAgICAgY29uc29sZS5sb2coYCAgLSBCYXNlIHByaWNlOiAke2l0ZW0uYmFzZV9wcmljZX1gKVxuICAgICAgY29uc29sZS5sb2coYCAgLSBRdWFudGl0eTogJHtpdGVtLnF1YW50aXR5fWApXG4gICAgICBjb25zb2xlLmxvZyhgICAtIEJhc2UgdG90YWw6ICR7YmFzZVRvdGFsfWApXG4gICAgICBjb25zb2xlLmxvZyhgICAtIEZsYXZvcnM6YCwgZmxhdm9ycy5tYXAoZiA9PiBgJHtmLm5hbWV9ICgke2YucHJpY2V9IHggJHtmLnF1YW50aXR5fSA9ICR7Zi5wcmljZSAqIGYucXVhbnRpdHl9KWApKVxuICAgICAgY29uc29sZS5sb2coYCAgLSBGbGF2b3IgdG90YWw6ICR7Zmxhdm9yVG90YWx9YClcbiAgICAgIGNvbnNvbGUubG9nKGAgIC0gRmluYWwgdG90YWw6ICR7dG90YWx9YClcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIG5hbWU6IGl0ZW0ucHJvZHVjdF9uYW1lLFxuICAgICAgICBiYXNlUHJpY2U6IGl0ZW0uYmFzZV9wcmljZSxcbiAgICAgICAgcXVhbnRpdHk6IGl0ZW0ucXVhbnRpdHksXG4gICAgICAgIGlzUGFjazogaXRlbS5pc19wYWNrLFxuICAgICAgICBwYWNrU2l6ZTogaXRlbS5zaXplLFxuICAgICAgICBpbWFnZVVybDogaXRlbS5pbWFnZV91cmwsXG4gICAgICAgIGNvdW50OiBpdGVtLmNvdW50LFxuICAgICAgICBmbGF2b3JEZXRhaWxzOiBmbGF2b3JzLm1hcChmID0+IGAke2YubmFtZX0gKCR7Zi5xdWFudGl0eX14KWApLmpvaW4oJywgJyksXG4gICAgICAgIHRvdGFsLFxuICAgICAgICBmbGF2b3JzXG4gICAgICB9O1xuICAgIH0pKTtcblxuICAgIGNvbnN0IHN1YnRvdGFsID0gaXRlbXMucmVkdWNlKChzdW0sIGl0ZW0pID0+IHN1bSArIGl0ZW0udG90YWwsIDApO1xuICAgIGNvbnN0IGl0ZW1Db3VudCA9IGl0ZW1zLnJlZHVjZSgoc3VtLCBpdGVtKSA9PiBzdW0gKyBpdGVtLnF1YW50aXR5LCAwKTtcblxuICAgIC8vIEhhbmRsZSBkZWxpdmVyeSBhZGRyZXNzXG4gICAgbGV0IGRlbGl2ZXJ5QWRkcmVzcztcbiAgICBsZXQgZGVsaXZlcnlGZWUgPSAwO1xuICAgIGxldCBjdXN0b21lckluZm87XG5cbiAgICBpZiAoc2Vzc2lvbj8udXNlcikge1xuICAgICAgLy8gUmVnaXN0ZXJlZCB1c2VyXG4gICAgICBpZiAodXNlTmV3QWRkcmVzcyAmJiBuZXdBZGRyZXNzKSB7XG4gICAgICAgIC8vIFVzZSBuZXcgYWRkcmVzc1xuICAgICAgICBjb25zdCB6b25lUmVzdWx0ID0gYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLnF1ZXJ5KFxuICAgICAgICAgICdTRUxFQ1Qgei5kZWxpdmVyeV9mZWUsIGMubmFtZSBhcyBjaXR5X25hbWUsIHoubmFtZSBhcyB6b25lX25hbWUgRlJPTSB6b25lcyB6IEpPSU4gY2l0aWVzIGMgT04gei5jaXR5X2lkID0gYy5pZCBXSEVSRSB6LmlkID0gPycsXG4gICAgICAgICAgW25ld0FkZHJlc3Muem9uZV9pZF1cbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh6b25lUmVzdWx0KSAmJiB6b25lUmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCB6b25lID0gem9uZVJlc3VsdFswXTtcbiAgICAgICAgICBkZWxpdmVyeUZlZSA9IHpvbmUuZGVsaXZlcnlfZmVlO1xuICAgICAgICAgIGRlbGl2ZXJ5QWRkcmVzcyA9IHtcbiAgICAgICAgICAgIHN0cmVldF9hZGRyZXNzOiBuZXdBZGRyZXNzLnN0cmVldF9hZGRyZXNzLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9pbmZvOiBuZXdBZGRyZXNzLmFkZGl0aW9uYWxfaW5mbyxcbiAgICAgICAgICAgIGNpdHlfbmFtZTogem9uZS5jaXR5X25hbWUsXG4gICAgICAgICAgICB6b25lX25hbWU6IHpvbmUuem9uZV9uYW1lLFxuICAgICAgICAgICAgZGVsaXZlcnlfZmVlOiB6b25lLmRlbGl2ZXJ5X2ZlZVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTYXZlIG5ldyBhZGRyZXNzIGlmIHJlcXVlc3RlZFxuICAgICAgICBpZiAoc2F2ZU5ld0FkZHJlc3MgJiYgbmV3QWRkcmVzcykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBTYXZpbmcgbmV3IGFkZHJlc3MgZm9yIHVzZXI6Jywgc2Vzc2lvbi51c2VyLmVtYWlsKVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIEdldCBjdXN0b21lciBJRFxuICAgICAgICAgIGNvbnN0IGN1c3RvbWVyUmVzdWx0ID0gYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLnF1ZXJ5KFxuICAgICAgICAgICAgJ1NFTEVDVCBpZCBGUk9NIGN1c3RvbWVycyBXSEVSRSBlbWFpbCA9ID8nLFxuICAgICAgICAgICAgW3Nlc3Npb24udXNlci5lbWFpbF1cbiAgICAgICAgICApO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGN1c3RvbWVyQXJyYXkgPSBBcnJheS5pc0FycmF5KGN1c3RvbWVyUmVzdWx0KSA/IGN1c3RvbWVyUmVzdWx0IDogKGN1c3RvbWVyUmVzdWx0ID8gW2N1c3RvbWVyUmVzdWx0XSA6IFtdKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoY3VzdG9tZXJBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21lcklkID0gY3VzdG9tZXJBcnJheVswXS5pZDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBhZGRyZXNzIGFscmVhZHkgZXhpc3RzIGZvciB0aGlzIGN1c3RvbWVyXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0FkZHJlc3NSZXN1bHQgPSBhd2FpdCBkYXRhYmFzZVNlcnZpY2UucXVlcnkoXG4gICAgICAgICAgICAgIGBTRUxFQ1QgaWQgRlJPTSBjdXN0b21lcl9hZGRyZXNzZXMgXG4gICAgICAgICAgICAgICBXSEVSRSBjdXN0b21lcl9pZCA9ID8gXG4gICAgICAgICAgICAgICBBTkQgc3RyZWV0X2FkZHJlc3MgPSA/IFxuICAgICAgICAgICAgICAgQU5EIGNpdHlfaWQgPSA/IFxuICAgICAgICAgICAgICAgQU5EIHpvbmVfaWQgPSA/IFxuICAgICAgICAgICAgICAgQU5EIChhZGRpdGlvbmFsX2luZm8gPSA/IE9SIChhZGRpdGlvbmFsX2luZm8gSVMgTlVMTCBBTkQgPyBJUyBOVUxMKSlgLFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgY3VzdG9tZXJJZCxcbiAgICAgICAgICAgICAgICBuZXdBZGRyZXNzLnN0cmVldF9hZGRyZXNzLFxuICAgICAgICAgICAgICAgIG5ld0FkZHJlc3MuY2l0eV9pZCxcbiAgICAgICAgICAgICAgICBuZXdBZGRyZXNzLnpvbmVfaWQsXG4gICAgICAgICAgICAgICAgbmV3QWRkcmVzcy5hZGRpdGlvbmFsX2luZm8gfHwgbnVsbCxcbiAgICAgICAgICAgICAgICBuZXdBZGRyZXNzLmFkZGl0aW9uYWxfaW5mbyB8fCBudWxsXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nQWRkcmVzc0FycmF5ID0gQXJyYXkuaXNBcnJheShleGlzdGluZ0FkZHJlc3NSZXN1bHQpID8gZXhpc3RpbmdBZGRyZXNzUmVzdWx0IDogKGV4aXN0aW5nQWRkcmVzc1Jlc3VsdCA/IFtleGlzdGluZ0FkZHJlc3NSZXN1bHRdIDogW10pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdBZGRyZXNzQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIC8vIEFkZHJlc3MgZG9lc24ndCBleGlzdCwgc2F2ZSBpdFxuICAgICAgICAgICAgICBjb25zdCBpbnNlcnRSZXN1bHQgPSBhd2FpdCBkYXRhYmFzZVNlcnZpY2UucXVlcnkoXG4gICAgICAgICAgICAgICAgJ0lOU0VSVCBJTlRPIGN1c3RvbWVyX2FkZHJlc3NlcyAoY3VzdG9tZXJfaWQsIHN0cmVldF9hZGRyZXNzLCBhZGRpdGlvbmFsX2luZm8sIGNpdHlfaWQsIHpvbmVfaWQsIGlzX2RlZmF1bHQpIFZBTFVFUyAoPywgPywgPywgPywgPywgPyknLFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIGN1c3RvbWVySWQsXG4gICAgICAgICAgICAgICAgICBuZXdBZGRyZXNzLnN0cmVldF9hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgbmV3QWRkcmVzcy5hZGRpdGlvbmFsX2luZm8gfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG5ld0FkZHJlc3MuY2l0eV9pZCxcbiAgICAgICAgICAgICAgICAgIG5ld0FkZHJlc3Muem9uZV9pZCxcbiAgICAgICAgICAgICAgICAgIGZhbHNlIC8vIERvbid0IHNldCBhcyBkZWZhdWx0IGF1dG9tYXRpY2FsbHlcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gTmV3IGFkZHJlc3Mgc2F2ZWQgd2l0aCBJRDonLCAoaW5zZXJ0UmVzdWx0IGFzIGFueSkuaW5zZXJ0SWQpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gQWRkcmVzcyBhbHJlYWR5IGV4aXN0cywgc2tpcHBpbmcgc2F2ZScpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBbREVCVUddIENvbmZpcm0gQVBJIC0gQ3VzdG9tZXIgbm90IGZvdW5kIGZvciBlbWFpbDonLCBzZXNzaW9uLnVzZXIuZW1haWwpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkQWRkcmVzc0lkKSB7XG4gICAgICAgIC8vIFVzZSBzZWxlY3RlZCBzYXZlZCBhZGRyZXNzXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBMb29raW5nIHVwIHNhdmVkIGFkZHJlc3MgSUQ6Jywgc2VsZWN0ZWRBZGRyZXNzSWQpXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBVc2VyIGVtYWlsOicsIHNlc3Npb24udXNlci5lbWFpbClcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFkZHJlc3NSZXN1bHQgPSBhd2FpdCBkYXRhYmFzZVNlcnZpY2UucXVlcnkoXG4gICAgICAgICAgYFNFTEVDVCBjYS5zdHJlZXRfYWRkcmVzcywgY2EuYWRkaXRpb25hbF9pbmZvLCBjLm5hbWUgYXMgY2l0eV9uYW1lLCB6Lm5hbWUgYXMgem9uZV9uYW1lLCB6LmRlbGl2ZXJ5X2ZlZVxuICAgICAgICAgICBGUk9NIGN1c3RvbWVyX2FkZHJlc3NlcyBjYVxuICAgICAgICAgICBKT0lOIGNpdGllcyBjIE9OIGNhLmNpdHlfaWQgPSBjLmlkXG4gICAgICAgICAgIEpPSU4gem9uZXMgeiBPTiBjYS56b25lX2lkID0gei5pZFxuICAgICAgICAgICBXSEVSRSBjYS5pZCA9ID8gQU5EIGNhLmN1c3RvbWVyX2lkID0gKFNFTEVDVCBpZCBGUk9NIGN1c3RvbWVycyBXSEVSRSBlbWFpbCA9ID8pYCxcbiAgICAgICAgICBbc2VsZWN0ZWRBZGRyZXNzSWQsIHNlc3Npb24udXNlci5lbWFpbF1cbiAgICAgICAgKTtcblxuICAgICAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gQWRkcmVzcyBsb29rdXAgcmVzdWx0OicsIGFkZHJlc3NSZXN1bHQpXG5cbiAgICAgICAgLy8gSGFuZGxlIGJvdGggYXJyYXkgYW5kIHNpbmdsZSBvYmplY3QgcmVzdWx0c1xuICAgICAgICBjb25zdCBhZGRyZXNzQXJyYXkgPSBBcnJheS5pc0FycmF5KGFkZHJlc3NSZXN1bHQpID8gYWRkcmVzc1Jlc3VsdCA6IChhZGRyZXNzUmVzdWx0ID8gW2FkZHJlc3NSZXN1bHRdIDogW10pO1xuXG4gICAgICAgIGlmIChhZGRyZXNzQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSBhZGRyZXNzQXJyYXlbMF07XG4gICAgICAgICAgZGVsaXZlcnlGZWUgPSBhZGRyZXNzLmRlbGl2ZXJ5X2ZlZTtcbiAgICAgICAgICBkZWxpdmVyeUFkZHJlc3MgPSB7XG4gICAgICAgICAgICBzdHJlZXRfYWRkcmVzczogYWRkcmVzcy5zdHJlZXRfYWRkcmVzcyxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfaW5mbzogYWRkcmVzcy5hZGRpdGlvbmFsX2luZm8sXG4gICAgICAgICAgICBjaXR5X25hbWU6IGFkZHJlc3MuY2l0eV9uYW1lLFxuICAgICAgICAgICAgem9uZV9uYW1lOiBhZGRyZXNzLnpvbmVfbmFtZSxcbiAgICAgICAgICAgIGRlbGl2ZXJ5X2ZlZTogYWRkcmVzcy5kZWxpdmVyeV9mZWVcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBEZWxpdmVyeSBhZGRyZXNzIHNldDonLCBkZWxpdmVyeUFkZHJlc3MpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFtERUJVR10gQ29uZmlybSBBUEkgLSBObyBhZGRyZXNzIGZvdW5kIGZvciBJRDonLCBzZWxlY3RlZEFkZHJlc3NJZClcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBHZXQgY3VzdG9tZXIgaW5mb1xuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIExvb2tpbmcgdXAgY3VzdG9tZXIgaW5mbyBmb3IgZW1haWw6Jywgc2Vzc2lvbi51c2VyLmVtYWlsKVxuICAgICAgY29uc3QgdXNlclJlc3VsdCA9IGF3YWl0IGRhdGFiYXNlU2VydmljZS5xdWVyeShcbiAgICAgICAgJ1NFTEVDVCBmaXJzdF9uYW1lLCBsYXN0X25hbWUsIGVtYWlsLCBwaG9uZSBGUk9NIGN1c3RvbWVycyBXSEVSRSBlbWFpbCA9ID8nLFxuICAgICAgICBbc2Vzc2lvbi51c2VyLmVtYWlsXVxuICAgICAgKTtcblxuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIEN1c3RvbWVyIGxvb2t1cCByZXN1bHQ6JywgdXNlclJlc3VsdClcblxuICAgICAgLy8gSGFuZGxlIGJvdGggYXJyYXkgYW5kIHNpbmdsZSBvYmplY3QgcmVzdWx0c1xuICAgICAgY29uc3QgdXNlckFycmF5ID0gQXJyYXkuaXNBcnJheSh1c2VyUmVzdWx0KSA/IHVzZXJSZXN1bHQgOiAodXNlclJlc3VsdCA/IFt1c2VyUmVzdWx0XSA6IFtdKTtcblxuICAgICAgaWYgKHVzZXJBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSB1c2VyQXJyYXlbMF07XG4gICAgICAgIGN1c3RvbWVySW5mbyA9IHtcbiAgICAgICAgICBuYW1lOiBgJHt1c2VyLmZpcnN0X25hbWV9ICR7dXNlci5sYXN0X25hbWV9YCxcbiAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICBwaG9uZTogdXNlci5waG9uZVxuICAgICAgICB9O1xuICAgICAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gQ3VzdG9tZXIgaW5mbyBzZXQ6JywgY3VzdG9tZXJJbmZvKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFtERUJVR10gQ29uZmlybSBBUEkgLSBObyBjdXN0b21lciBmb3VuZCBmb3IgZW1haWw6Jywgc2Vzc2lvbi51c2VyLmVtYWlsKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBHdWVzdCB1c2VyXG4gICAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gUHJvY2Vzc2luZyBndWVzdCB1c2VyJylcbiAgICAgIGlmICghZ3Vlc3REYXRhKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBbREVCVUddIENvbmZpcm0gQVBJIC0gTm8gZ3Vlc3QgZGF0YSBwcm92aWRlZCcpXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogJ0d1ZXN0IGRhdGEgaXMgcmVxdWlyZWQnLFxuICAgICAgICAgIGVycm9yOiAnTWlzc2luZyBndWVzdCBpbmZvcm1hdGlvbidcbiAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIEd1ZXN0IGRhdGEgcmVjZWl2ZWQ6JywgSlNPTi5zdHJpbmdpZnkoZ3Vlc3REYXRhLCBudWxsLCAyKSlcblxuICAgICAgLy8gQ29udmVydCB6b25lIHRvIG51bWJlciBpZiBpdCdzIGEgc3RyaW5nXG4gICAgICBjb25zdCB6b25lSWQgPSB0eXBlb2YgZ3Vlc3REYXRhLnpvbmUgPT09ICdzdHJpbmcnID8gcGFyc2VJbnQoZ3Vlc3REYXRhLnpvbmUsIDEwKSA6IGd1ZXN0RGF0YS56b25lO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gWm9uZSBJRCAob3JpZ2luYWwpOicsIGd1ZXN0RGF0YS56b25lKVxuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIFpvbmUgSUQgKGNvbnZlcnRlZCk6Jywgem9uZUlkKVxuICAgICAgXG4gICAgICBpZiAoaXNOYU4oem9uZUlkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgW0RFQlVHXSBDb25maXJtIEFQSSAtIEludmFsaWQgem9uZSBJRDonLCBndWVzdERhdGEuem9uZSlcbiAgICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICBtZXNzYWdlOiAnSW52YWxpZCB6b25lIElEJyxcbiAgICAgICAgICBlcnJvcjogJ1pvbmUgSUQgbXVzdCBiZSBhIHZhbGlkIG51bWJlcidcbiAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IGRlbGl2ZXJ5IGZlZSBmb3IgZ3Vlc3QgYWRkcmVzc1xuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIFF1ZXJ5aW5nIHpvbmUgd2l0aCBJRDonLCB6b25lSWQpXG4gICAgICBjb25zdCB6b25lUmVzdWx0ID0gYXdhaXQgZGF0YWJhc2VTZXJ2aWNlLnF1ZXJ5KFxuICAgICAgICAnU0VMRUNUIHouZGVsaXZlcnlfZmVlLCBjLm5hbWUgYXMgY2l0eV9uYW1lLCB6Lm5hbWUgYXMgem9uZV9uYW1lIEZST00gem9uZXMgeiBKT0lOIGNpdGllcyBjIE9OIHouY2l0eV9pZCA9IGMuaWQgV0hFUkUgei5pZCA9ID8nLFxuICAgICAgICBbem9uZUlkXVxuICAgICAgKTtcblxuICAgICAgY29uc29sZS5sb2coJ/CflI0gW0RFQlVHXSBDb25maXJtIEFQSSAtIFpvbmUgcXVlcnkgcmVzdWx0OicsIHpvbmVSZXN1bHQpXG5cbiAgICAgIC8vIEhhbmRsZSBib3RoIGFycmF5IGFuZCBzaW5nbGUgb2JqZWN0IHJlc3VsdHNcbiAgICAgIGNvbnN0IHpvbmVBcnJheSA9IEFycmF5LmlzQXJyYXkoem9uZVJlc3VsdCkgPyB6b25lUmVzdWx0IDogKHpvbmVSZXN1bHQgPyBbem9uZVJlc3VsdF0gOiBbXSk7XG5cbiAgICAgIGlmICh6b25lQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCB6b25lID0gem9uZUFycmF5WzBdO1xuICAgICAgICBkZWxpdmVyeUZlZSA9IHpvbmUuZGVsaXZlcnlfZmVlO1xuICAgICAgICBkZWxpdmVyeUFkZHJlc3MgPSB7XG4gICAgICAgICAgc3RyZWV0X2FkZHJlc3M6IGd1ZXN0RGF0YS5hZGRyZXNzLFxuICAgICAgICAgIGFkZGl0aW9uYWxfaW5mbzogZ3Vlc3REYXRhLmFkZGl0aW9uYWxJbmZvLFxuICAgICAgICAgIGNpdHlfbmFtZTogem9uZS5jaXR5X25hbWUsXG4gICAgICAgICAgem9uZV9uYW1lOiB6b25lLnpvbmVfbmFtZSxcbiAgICAgICAgICBkZWxpdmVyeV9mZWU6IHpvbmUuZGVsaXZlcnlfZmVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBEZWxpdmVyeSBhZGRyZXNzIHNldDonLCBkZWxpdmVyeUFkZHJlc3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgW0RFQlVHXSBDb25maXJtIEFQSSAtIFpvbmUgbm90IGZvdW5kIGZvciBJRDonLCB6b25lSWQpXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgem9uZSBzZWxlY3RlZCcsXG4gICAgICAgICAgZXJyb3I6ICdab25lIG5vdCBmb3VuZCBpbiBkYXRhYmFzZSdcbiAgICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICAgIH1cblxuICAgICAgY3VzdG9tZXJJbmZvID0ge1xuICAgICAgICBuYW1lOiBndWVzdERhdGEubmFtZSxcbiAgICAgICAgZW1haWw6IGd1ZXN0RGF0YS5lbWFpbCxcbiAgICAgICAgcGhvbmU6IGd1ZXN0RGF0YS5waG9uZVxuICAgICAgfTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBDdXN0b21lciBpbmZvIHNldDonLCBjdXN0b21lckluZm8pXG4gICAgfVxuXG4gICAgaWYgKCFkZWxpdmVyeUFkZHJlc3MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBbREVCVUddIENvbmZpcm0gQVBJIC0gTm8gZGVsaXZlcnkgYWRkcmVzcyBzZXQnKVxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICdEZWxpdmVyeSBhZGRyZXNzIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgZXJyb3I6ICdObyB2YWxpZCBkZWxpdmVyeSBhZGRyZXNzIHByb3ZpZGVkJ1xuICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICBpZiAoIWN1c3RvbWVySW5mbykge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIFtERUJVR10gQ29uZmlybSBBUEkgLSBObyBjdXN0b21lciBpbmZvIHNldCcpXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZTogJ0N1c3RvbWVyIGluZm9ybWF0aW9uIGlzIHJlcXVpcmVkJyxcbiAgICAgICAgZXJyb3I6ICdNaXNzaW5nIGN1c3RvbWVyIGluZm9ybWF0aW9uJ1xuICAgICAgfSwgeyBzdGF0dXM6IDQwMCB9KTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygn8J+UjSBbREVCVUddIENvbmZpcm0gQVBJIC0gQWxsIHZhbGlkYXRpb25zIHBhc3NlZCwgcHJvY2VlZGluZyB3aXRoIG9yZGVyIGNvbmZpcm1hdGlvbicpXG5cbiAgICBjb25zdCB0b3RhbCA9IHN1YnRvdGFsICsgTnVtYmVyKGRlbGl2ZXJ5RmVlKTtcblxuICAgIGNvbnNvbGUubG9nKGDwn5SNIFtERUJVR10gQ29uZmlybSBBUEkgLSBGaW5hbCBjYWxjdWxhdGlvbnM6YClcbiAgICBjb25zb2xlLmxvZyhgICAtIFN1YnRvdGFsOiAke3N1YnRvdGFsfWApXG4gICAgY29uc29sZS5sb2coYCAgLSBEZWxpdmVyeSBmZWU6ICR7ZGVsaXZlcnlGZWV9YClcbiAgICBjb25zb2xlLmxvZyhgICAtIFRvdGFsOiAke3RvdGFsfWApXG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6ICdPcmRlciBjb25maXJtZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgY2FydDoge1xuICAgICAgICAgIGl0ZW1zLFxuICAgICAgICAgIHN1YnRvdGFsLFxuICAgICAgICAgIGRlbGl2ZXJ5RmVlOiBOdW1iZXIoZGVsaXZlcnlGZWUpLFxuICAgICAgICAgIHRvdGFsLFxuICAgICAgICAgIGl0ZW1Db3VudFxuICAgICAgICB9LFxuICAgICAgICBkZWxpdmVyeUFkZHJlc3MsXG4gICAgICAgIGN1c3RvbWVySW5mb1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY29uZmlybWluZyBvcmRlcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byBjb25maXJtIG9yZGVyJyxcbiAgICAgIGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJ1xuICAgIH0sIHsgc3RhdHVzOiA1MDAgfSk7XG4gIH1cbn0gIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImdldFNlcnZlclNlc3Npb24iLCJjb29raWVzIiwidjQiLCJ1dWlkdjQiLCJhdXRoT3B0aW9ucyIsImRhdGFiYXNlU2VydmljZSIsIm9yZGVyTW9kZVNlcnZpY2UiLCJnZXRPckNyZWF0ZUNhcnQiLCJjb29raWVTdG9yZSIsImNhcnRJZCIsImdldCIsInZhbHVlIiwic2Vzc2lvbklkIiwicmVzdWx0IiwicXVlcnkiLCJpbnNlcnRJZCIsInRvU3RyaW5nIiwic2V0Q2FydENvb2tpZSIsImNvbnNvbGUiLCJsb2ciLCJjYXJ0RXhpc3RzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwic2V0IiwiaHR0cE9ubHkiLCJzZWN1cmUiLCJwcm9jZXNzIiwic2FtZVNpdGUiLCJtYXhBZ2UiLCJQT1NUIiwicmVxdWVzdCIsInNlc3Npb24iLCJyZXF1ZXN0Qm9keSIsImpzb24iLCJndWVzdERhdGEiLCJndWVzdCIsInNlbGVjdGVkQWRkcmVzc0lkIiwidXNlTmV3QWRkcmVzcyIsIm5ld0FkZHJlc3MiLCJzYXZlTmV3QWRkcmVzcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1c2VyIiwiZW1haWwiLCJlcnJvciIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwic3RhdHVzIiwiY2FydFJlc3VsdCIsImNhcnRJdGVtc0FycmF5IiwiY2FydEl0ZW1zRm9yQ2hlY2siLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiaXRlbSIsImZsYXZvcnMiLCJpc19wYWNrIiwiZmxhdm9yUmVzdWx0IiwiaWQiLCJmbGF2b3IiLCJuYW1lIiwicXVhbnRpdHkiLCJwcm9kdWN0SWQiLCJwcm9kdWN0X2lkIiwiaXNQYWNrIiwicGFja1NpemUiLCJzaXplIiwicHJvZHVjdE5hbWUiLCJwcm9kdWN0X25hbWUiLCJhdmFpbGFiaWxpdHlDaGVjayIsImNoZWNrQ2FydEF2YWlsYWJpbGl0eSIsImlzQXZhaWxhYmxlIiwiZXJyb3JNZXNzYWdlIiwib3V0T2ZTdG9ja0l0ZW1zIiwicHJvZHVjdEl0ZW1zIiwiZmlsdGVyIiwidHlwZSIsImZsYXZvckl0ZW1zIiwiY2FydEl0ZW0iLCJmaW5kIiwiY2kiLCJyZXF1ZXN0ZWRRdWFudGl0eSIsImF2YWlsYWJsZVF1YW50aXR5IiwiZmxhdm9ySWRzIiwiam9pbiIsImYiLCJmbGF2b3JOYW1lIiwiaXRlbXMiLCJwcmljZSIsImxhcmdlX3ByaWNlIiwibWVkaXVtX3ByaWNlIiwibWluaV9wcmljZSIsImJhc2VUb3RhbCIsImJhc2VfcHJpY2UiLCJmbGF2b3JUb3RhbCIsInJlZHVjZSIsInN1bSIsInRvdGFsIiwiYmFzZVByaWNlIiwiaW1hZ2VVcmwiLCJpbWFnZV91cmwiLCJjb3VudCIsImZsYXZvckRldGFpbHMiLCJzdWJ0b3RhbCIsIml0ZW1Db3VudCIsImRlbGl2ZXJ5QWRkcmVzcyIsImRlbGl2ZXJ5RmVlIiwiY3VzdG9tZXJJbmZvIiwiem9uZVJlc3VsdCIsInpvbmVfaWQiLCJ6b25lIiwiZGVsaXZlcnlfZmVlIiwic3RyZWV0X2FkZHJlc3MiLCJhZGRpdGlvbmFsX2luZm8iLCJjaXR5X25hbWUiLCJ6b25lX25hbWUiLCJjdXN0b21lclJlc3VsdCIsImN1c3RvbWVyQXJyYXkiLCJjdXN0b21lcklkIiwiZXhpc3RpbmdBZGRyZXNzUmVzdWx0IiwiY2l0eV9pZCIsImV4aXN0aW5nQWRkcmVzc0FycmF5IiwiaW5zZXJ0UmVzdWx0IiwiYWRkcmVzc1Jlc3VsdCIsImFkZHJlc3NBcnJheSIsImFkZHJlc3MiLCJ1c2VyUmVzdWx0IiwidXNlckFycmF5IiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsInBob25lIiwiem9uZUlkIiwicGFyc2VJbnQiLCJpc05hTiIsInpvbmVBcnJheSIsImFkZGl0aW9uYWxJbmZvIiwiTnVtYmVyIiwiZGF0YSIsImNhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/checkout/confirm/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/auth-options.ts":
/*!*****************************!*\
  !*** ./lib/auth-options.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/../../node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var _db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./db */ \"(rsc)/./lib/db.ts\");\n\n\n\nconst authOptions = {\n    providers: [\n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            name: \"Credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                const [rows] = await _db__WEBPACK_IMPORTED_MODULE_2__[\"default\"].query(\"SELECT * FROM customers WHERE email = ?\", [\n                    credentials.email\n                ]);\n                const user = rows[0];\n                if (!user) {\n                    return null;\n                }\n                // Compare password with bcrypt\n                const isPasswordValid = await (0,bcryptjs__WEBPACK_IMPORTED_MODULE_1__.compare)(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id.toString(),\n                    email: user.email,\n                    name: `${user.first_name} ${user.last_name}`,\n                    firstName: user.first_name,\n                    lastName: user.last_name,\n                    phone: user.phone\n                };\n            }\n        })\n    ],\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                token.id = user.id;\n                token.firstName = user.firstName;\n                token.lastName = user.lastName;\n                token.phone = user.phone;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (session.user) {\n                session.user.id = token.id;\n                session.user.firstName = token.firstName;\n                session.user.lastName = token.lastName;\n                session.user.phone = token.phone;\n            }\n            return session;\n        }\n    },\n    pages: {\n        signIn: \"/auth/login\",\n        signOut: \"/auth/signout\"\n    },\n    session: {\n        strategy: \"jwt\",\n        maxAge: 24 * 60 * 60\n    },\n    jwt: {\n        maxAge: 24 * 60 * 60\n    },\n    secret: process.env.NEXTAUTH_SECRET || \"x+1DNU9w01MI2M7bNhUuI9F74OxrivACw4XemPMY8gE=\",\n    debug: \"development\" === \"development\",\n    useSecureCookies: \"development\" === \"production\",\n    cookies: {\n        sessionToken: {\n            name: `next-auth.session-token`,\n            options: {\n                httpOnly: true,\n                sameSite: \"lax\",\n                path: \"/\",\n                secure: \"development\" === \"production\"\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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XSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEF1dGhPcHRpb25zIH0gZnJvbSAnbmV4dC1hdXRoJztcbmltcG9ydCBDcmVkZW50aWFsc1Byb3ZpZGVyIGZyb20gJ25leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgY29tcGFyZSB9IGZyb20gJ2JjcnlwdGpzJztcbmltcG9ydCBkYiBmcm9tICcuL2RiJztcbmltcG9ydCB7IEpXVCB9IGZyb20gJ25leHQtYXV0aC9qd3QnO1xuXG5pbnRlcmZhY2UgVXNlciB7XG4gIGlkOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gIGxhc3ROYW1lOiBzdHJpbmc7XG4gIHBob25lOiBzdHJpbmc7XG59XG5cbmRlY2xhcmUgbW9kdWxlICduZXh0LWF1dGgnIHtcbiAgaW50ZXJmYWNlIFNlc3Npb24ge1xuICAgIHVzZXI6IFVzZXI7XG4gIH1cbiAgaW50ZXJmYWNlIFVzZXIge1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lOiBzdHJpbmc7XG4gICAgcGhvbmU6IHN0cmluZztcbiAgfVxufVxuXG5kZWNsYXJlIG1vZHVsZSAnbmV4dC1hdXRoL2p3dCcge1xuICBpbnRlcmZhY2UgSldUIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIGxhc3ROYW1lOiBzdHJpbmc7XG4gICAgcGhvbmU6IHN0cmluZztcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYXV0aE9wdGlvbnM6IE5leHRBdXRoT3B0aW9ucyA9IHtcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XG4gICAgICBuYW1lOiAnQ3JlZGVudGlhbHMnLFxuICAgICAgY3JlZGVudGlhbHM6IHtcbiAgICAgICAgZW1haWw6IHsgbGFiZWw6ICdFbWFpbCcsIHR5cGU6ICdlbWFpbCcgfSxcbiAgICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6ICdQYXNzd29yZCcsIHR5cGU6ICdwYXNzd29yZCcgfVxuICAgICAgfSxcbiAgICAgIGFzeW5jIGF1dGhvcml6ZShjcmVkZW50aWFscykge1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzPy5lbWFpbCB8fCAhY3JlZGVudGlhbHM/LnBhc3N3b3JkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBbcm93c10gPSBhd2FpdCBkYi5xdWVyeShcbiAgICAgICAgICAnU0VMRUNUICogRlJPTSBjdXN0b21lcnMgV0hFUkUgZW1haWwgPSA/JyxcbiAgICAgICAgICBbY3JlZGVudGlhbHMuZW1haWxdXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgdXNlciA9IChyb3dzIGFzIGFueVtdKVswXTtcblxuICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbXBhcmUgcGFzc3dvcmQgd2l0aCBiY3J5cHRcbiAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgY29tcGFyZShjcmVkZW50aWFscy5wYXNzd29yZCwgdXNlci5wYXNzd29yZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogdXNlci5pZC50b1N0cmluZygpLFxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgIG5hbWU6IGAke3VzZXIuZmlyc3RfbmFtZX0gJHt1c2VyLmxhc3RfbmFtZX1gLFxuICAgICAgICAgIGZpcnN0TmFtZTogdXNlci5maXJzdF9uYW1lLFxuICAgICAgICAgIGxhc3ROYW1lOiB1c2VyLmxhc3RfbmFtZSxcbiAgICAgICAgICBwaG9uZTogdXNlci5waG9uZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pXG4gIF0sXG4gIGNhbGxiYWNrczoge1xuICAgIGFzeW5jIGp3dCh7IHRva2VuLCB1c2VyIH0pIHtcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIHRva2VuLmlkID0gdXNlci5pZDtcbiAgICAgICAgdG9rZW4uZmlyc3ROYW1lID0gdXNlci5maXJzdE5hbWU7XG4gICAgICAgIHRva2VuLmxhc3ROYW1lID0gdXNlci5sYXN0TmFtZTtcbiAgICAgICAgdG9rZW4ucGhvbmUgPSB1c2VyLnBob25lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH0sXG4gICAgYXN5bmMgc2Vzc2lvbih7IHNlc3Npb24sIHRva2VuIH0pIHtcbiAgICAgIGlmIChzZXNzaW9uLnVzZXIpIHtcbiAgICAgICAgc2Vzc2lvbi51c2VyLmlkID0gdG9rZW4uaWQ7XG4gICAgICAgIHNlc3Npb24udXNlci5maXJzdE5hbWUgPSB0b2tlbi5maXJzdE5hbWU7XG4gICAgICAgIHNlc3Npb24udXNlci5sYXN0TmFtZSA9IHRva2VuLmxhc3ROYW1lO1xuICAgICAgICBzZXNzaW9uLnVzZXIucGhvbmUgPSB0b2tlbi5waG9uZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cbiAgfSxcbiAgcGFnZXM6IHtcbiAgICBzaWduSW46ICcvYXV0aC9sb2dpbicsXG4gICAgc2lnbk91dDogJy9hdXRoL3NpZ25vdXQnXG4gIH0sXG4gIHNlc3Npb246IHtcbiAgICBzdHJhdGVneTogJ2p3dCcsXG4gICAgbWF4QWdlOiAyNCAqIDYwICogNjAsIC8vIDI0IGhvdXJzXG4gIH0sXG4gIGp3dDoge1xuICAgIG1heEFnZTogMjQgKiA2MCAqIDYwLCAvLyAyNCBob3Vyc1xuICB9LFxuICBzZWNyZXQ6IHByb2Nlc3MuZW52Lk5FWFRBVVRIX1NFQ1JFVCB8fCAneCsxRE5VOXcwMU1JMk03Yk5oVXVJOUY3NE94cml2QUN3NFhlbVBNWThnRT0nLFxuICBkZWJ1ZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcsXG4gIHVzZVNlY3VyZUNvb2tpZXM6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicsXG4gIGNvb2tpZXM6IHtcbiAgICBzZXNzaW9uVG9rZW46IHtcbiAgICAgIG5hbWU6IGBuZXh0LWF1dGguc2Vzc2lvbi10b2tlbmAsXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgICAgICBzYW1lU2l0ZTogJ2xheCcsXG4gICAgICAgIHBhdGg6ICcvJyxcbiAgICAgICAgc2VjdXJlOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgICB9XG4gICAgfVxuICB9XG59OyAiXSwibmFtZXMiOlsiQ3JlZGVudGlhbHNQcm92aWRlciIsImNvbXBhcmUiLCJkYiIsImF1dGhPcHRpb25zIiwicHJvdmlkZXJzIiwibmFtZSIsImNyZWRlbnRpYWxzIiwiZW1haWwiLCJsYWJlbCIsInR5cGUiLCJwYXNzd29yZCIsImF1dGhvcml6ZSIsInJvd3MiLCJxdWVyeSIsInVzZXIiLCJpc1Bhc3N3b3JkVmFsaWQiLCJpZCIsInRvU3RyaW5nIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwicGhvbmUiLCJjYWxsYmFja3MiLCJqd3QiLCJ0b2tlbiIsInNlc3Npb24iLCJwYWdlcyIsInNpZ25JbiIsInNpZ25PdXQiLCJzdHJhdGVneSIsIm1heEFnZSIsInNlY3JldCIsInByb2Nlc3MiLCJlbnYiLCJORVhUQVVUSF9TRUNSRVQiLCJkZWJ1ZyIsInVzZVNlY3VyZUNvb2tpZXMiLCJjb29raWVzIiwic2Vzc2lvblRva2VuIiwib3B0aW9ucyIsImh0dHBPbmx5Iiwic2FtZVNpdGUiLCJwYXRoIiwic2VjdXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth-options.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getOrderByTracking: () => (/* binding */ getOrderByTracking),\n/* harmony export */   getOrderDetails: () => (/* binding */ getOrderDetails),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   saveOrder: () => (/* binding */ saveOrder),\n/* harmony export */   testConnection: () => (/* binding */ testConnection),\n/* harmony export */   updateOrderStatus: () => (/* binding */ updateOrderStatus)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"(rsc)/./node_modules/mysql2/promise.js\");\n\n// Create MySQL connection pool\nconst pool = mysql2_promise__WEBPACK_IMPORTED_MODULE_0__.createPool({\n    host: process.env.DB_HOST || \"localhost\",\n    user: process.env.DB_USER || \"root\",\n    password: process.env.DB_PASSWORD || \"Goodmorning@1\",\n    database: process.env.DB_NAME || \"crumbled_nextDB\",\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n    enableKeepAlive: true,\n    keepAliveInitialDelay: 10000,\n    idleTimeout: 60000,\n    maxIdle: 5 // Maximum number of idle connections to keep\n});\n// Test connection function\nasync function testConnection() {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        const [result] = await connection.query(\"SELECT NOW() as `current_time`, VERSION() as mysql_version\");\n        return {\n            success: true,\n            message: \"Database connected successfully\",\n            timestamp: result[0].current_time,\n            version: result[0].mysql_version\n        };\n    } catch (error) {\n        console.error(\"Database connection failed:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown connection error\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function saveOrder(orderData) {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        // Check if orders table exists\n        const [tableCheck] = await connection.query(\"SELECT COUNT(*) as count FROM information_schema.tables WHERE table_schema = 'crumbled_nextDB' AND table_name = 'orders'\");\n        if (tableCheck[0].count === 0) {\n            return {\n                success: false,\n                error: \"Orders table does not exist. Please set up the database first.\"\n            };\n        }\n        // Generate tracking ID if not provided\n        if (!orderData.trackingId) {\n            orderData.trackingId = `CC${Math.random().toString(36).substring(2, 10).toUpperCase()}`;\n        }\n        // Start transaction by inserting order first\n        const [orderResult] = await connection.query(`INSERT INTO orders (\n        customer_name, \n        customer_email, \n        customer_phone, \n        address, \n        city, \n        state, \n        zip_code, \n        total_amount,\n        tracking_id,\n        order_status\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending')`, [\n            orderData.customerName,\n            orderData.customerEmail,\n            orderData.customerPhone,\n            orderData.address,\n            orderData.city,\n            orderData.state,\n            orderData.zipCode,\n            orderData.totalAmount,\n            orderData.trackingId || `CC${Math.random().toString(36).substring(2, 10).toUpperCase()}`\n        ]);\n        const orderId = orderResult.insertId;\n        // Process each item and update stock\n        for (const item of orderData.items){\n            // Insert order item\n            await connection.query(`INSERT INTO order_items (\n          order_id, \n          product_id, \n          product_name, \n          quantity, \n          price, \n          is_bundle, \n          bundle_size, \n          bundle_items\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`, [\n                orderId,\n                item.id,\n                item.name,\n                item.quantity,\n                item.price,\n                !!item.isBundle,\n                item.bundleSize || null,\n                item.bundleItems ? JSON.stringify(item.bundleItems) : null\n            ]);\n            // Update stock for individual items\n            if (!item.isBundle) {\n                // For regular items, reduce stock directly\n                const [stockUpdate] = await connection.query(`UPDATE stock \n           SET quantity = quantity - ?, updated_at = CURRENT_TIMESTAMP\n           WHERE product_id = ?\n           RETURNING quantity`, [\n                    item.quantity,\n                    item.id\n                ]);\n                // Check if stock went negative (optional warning)\n                if (stockUpdate.length > 0 && stockUpdate[0].quantity < 0) {\n                    console.warn(`Warning: Stock for product ${item.name} (ID: ${item.id}) went negative: ${stockUpdate[0].quantity}`);\n                }\n            } else {\n                // For bundles, reduce stock for each bundled item\n                if (item.bundleItems && Array.isArray(item.bundleItems)) {\n                    for (const bundleItem of item.bundleItems){\n                        const [stockUpdate] = await connection.query(`UPDATE stock \n               SET quantity = quantity - ?, updated_at = CURRENT_TIMESTAMP\n               WHERE product_id = ?\n               RETURNING quantity, product_name`, [\n                            item.quantity,\n                            bundleItem.id\n                        ]);\n                        if (stockUpdate.length > 0 && stockUpdate[0].quantity < 0) {\n                            console.warn(`Warning: Stock for bundled product ${stockUpdate[0].product_name} (ID: ${bundleItem.id}) went negative: ${stockUpdate[0].quantity}`);\n                        }\n                    }\n                }\n            }\n        }\n        return {\n            success: true,\n            orderId,\n            trackingId: orderData.trackingId\n        };\n    } catch (error) {\n        console.error(\"Error saving order:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database operation failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function getOrders() {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        // Check if orders table exists\n        const [tableCheck] = await connection.query(\"SELECT COUNT(*) as count FROM information_schema.tables WHERE table_schema = 'crumbled_nextDB' AND table_name = 'orders'\");\n        if (tableCheck[0].count === 0) {\n            return {\n                success: false,\n                error: \"Orders table does not exist. Please set up the database first.\"\n            };\n        }\n        const [orders] = await connection.query(\"SELECT * FROM orders ORDER BY created_at DESC\");\n        return {\n            success: true,\n            orders\n        };\n    } catch (error) {\n        console.error(\"Error fetching orders:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database connection failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function getOrderDetails(orderId) {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        const [order] = await connection.query(\"SELECT * FROM orders WHERE id = ?\", [\n            orderId\n        ]);\n        if (order.length === 0) {\n            return {\n                success: false,\n                error: \"Order not found\"\n            };\n        }\n        const [items] = await connection.query(\"SELECT * FROM order_items WHERE order_id = ?\", [\n            orderId\n        ]);\n        return {\n            success: true,\n            order: order[0],\n            items\n        };\n    } catch (error) {\n        console.error(\"Error fetching order details:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database operation failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function getOrderByTracking(trackingId, email) {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        const [order] = await connection.query(\"SELECT * FROM orders WHERE tracking_id = ? AND customer_email = ?\", [\n            trackingId,\n            email\n        ]);\n        if (order.length === 0) {\n            return {\n                success: false,\n                error: \"Order not found or email doesn't match\"\n            };\n        }\n        const [items] = await connection.query(\"SELECT * FROM order_items WHERE order_id = ?\", [\n            order[0].id\n        ]);\n        return {\n            success: true,\n            order: order[0],\n            items\n        };\n    } catch (error) {\n        console.error(\"Error fetching order by tracking:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database operation failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function updateOrderStatus(orderId, status) {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        const [result] = await connection.query(\"UPDATE orders SET order_status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?\", [\n            status,\n            orderId\n        ]);\n        return {\n            success: true,\n            message: \"Order status updated successfully\"\n        };\n    } catch (error) {\n        console.error(\"Error updating order status:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database operation failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\n// Export the pool as default\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pool);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/databaseService.ts":
/*!*****************************************!*\
  !*** ./lib/services/databaseService.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   databaseService: () => (/* binding */ databaseService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n\nconst databaseService = {\n    async query (sql, params) {\n        let connection;\n        try {\n            connection = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getConnection();\n            const [rows] = await connection.execute(sql, params);\n            return rows;\n        } catch (error) {\n            console.error(\"Database query error:\", error);\n            throw error;\n        } finally{\n            if (connection) {\n                connection.release();\n            }\n        }\n    },\n    async transaction (callback) {\n        const connection = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getConnection();\n        try {\n            await connection.beginTransaction();\n            const result = await callback(connection);\n            await connection.commit();\n            return result;\n        } catch (error) {\n            await connection.rollback();\n            throw error;\n        } finally{\n            connection.release();\n        }\n    },\n    async testConnection () {\n        let connection;\n        try {\n            connection = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getConnection();\n            const [result] = await connection.query(\"SELECT NOW() as `current_time`, VERSION() as mysql_version\");\n            return {\n                success: true,\n                data: result[0]\n            };\n        } catch (error) {\n            console.error(\"Database connection test failed:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        } finally{\n            if (connection) {\n                connection.release();\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvZGF0YWJhc2VTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQzRCO0FBRXJCLE1BQU1DLGtCQUFrQjtJQUM3QixNQUFNQyxPQUFlQyxHQUFXLEVBQUVDLE1BQWM7UUFDOUMsSUFBSUM7UUFDSixJQUFJO1lBQ0ZBLGFBQWEsTUFBTUwsK0NBQUlBLENBQUNNLGFBQWE7WUFDckMsTUFBTSxDQUFDQyxLQUFLLEdBQUcsTUFBTUYsV0FBV0csT0FBTyxDQUFDTCxLQUFLQztZQUM3QyxPQUFPRztRQUNULEVBQUUsT0FBT0UsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMseUJBQXlCQTtZQUN2QyxNQUFNQTtRQUNSLFNBQVU7WUFDUixJQUFJSixZQUFZO2dCQUNkQSxXQUFXTSxPQUFPO1lBQ3BCO1FBQ0Y7SUFDRjtJQUVBLE1BQU1DLGFBQWVDLFFBQXNEO1FBQ3pFLE1BQU1SLGFBQWEsTUFBTUwsK0NBQUlBLENBQUNNLGFBQWE7UUFDM0MsSUFBSTtZQUNGLE1BQU1ELFdBQVdTLGdCQUFnQjtZQUNqQyxNQUFNQyxTQUFTLE1BQU1GLFNBQVNSO1lBQzlCLE1BQU1BLFdBQVdXLE1BQU07WUFDdkIsT0FBT0Q7UUFDVCxFQUFFLE9BQU9OLE9BQU87WUFDZCxNQUFNSixXQUFXWSxRQUFRO1lBQ3pCLE1BQU1SO1FBQ1IsU0FBVTtZQUNSSixXQUFXTSxPQUFPO1FBQ3BCO0lBQ0Y7SUFFQSxNQUFNTztRQUNKLElBQUliO1FBQ0osSUFBSTtZQUNGQSxhQUFhLE1BQU1MLCtDQUFJQSxDQUFDTSxhQUFhO1lBQ3JDLE1BQU0sQ0FBQ1MsT0FBTyxHQUFHLE1BQU1WLFdBQVdILEtBQUssQ0FBQztZQUN4QyxPQUFPO2dCQUNMaUIsU0FBUztnQkFDVEMsTUFBTUwsTUFBTSxDQUFDLEVBQUU7WUFDakI7UUFDRixFQUFFLE9BQU9OLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLG9DQUFvQ0E7WUFDbEQsT0FBTztnQkFDTFUsU0FBUztnQkFDVFYsT0FBT0EsaUJBQWlCWSxRQUFRWixNQUFNYSxPQUFPLEdBQUc7WUFDbEQ7UUFDRixTQUFVO1lBQ1IsSUFBSWpCLFlBQVk7Z0JBQ2RBLFdBQVdNLE9BQU87WUFDcEI7UUFDRjtJQUNGO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NydW1ibGVkLXdlYnNpdGUvLi9saWIvc2VydmljZXMvZGF0YWJhc2VTZXJ2aWNlLnRzP2I4NGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG15c3FsIGZyb20gJ215c3FsMi9wcm9taXNlJztcbmltcG9ydCBwb29sIGZyb20gJ0AvbGliL2RiJztcblxuZXhwb3J0IGNvbnN0IGRhdGFiYXNlU2VydmljZSA9IHtcbiAgYXN5bmMgcXVlcnk8VCA9IGFueT4oc3FsOiBzdHJpbmcsIHBhcmFtcz86IGFueVtdKTogUHJvbWlzZTxUPiB7XG4gICAgbGV0IGNvbm5lY3Rpb247XG4gICAgdHJ5IHtcbiAgICAgIGNvbm5lY3Rpb24gPSBhd2FpdCBwb29sLmdldENvbm5lY3Rpb24oKTtcbiAgICAgIGNvbnN0IFtyb3dzXSA9IGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZShzcWwsIHBhcmFtcyk7XG4gICAgICByZXR1cm4gcm93cyBhcyBUO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEYXRhYmFzZSBxdWVyeSBlcnJvcjonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFzeW5jIHRyYW5zYWN0aW9uPFQ+KGNhbGxiYWNrOiAoY29ubmVjdGlvbjogbXlzcWwuQ29ubmVjdGlvbikgPT4gUHJvbWlzZTxUPik6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhd2FpdCBwb29sLmdldENvbm5lY3Rpb24oKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY29ubmVjdGlvbi5iZWdpblRyYW5zYWN0aW9uKCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsYmFjayhjb25uZWN0aW9uKTtcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWl0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhd2FpdCBjb25uZWN0aW9uLnJvbGxiYWNrKCk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgfVxuICB9LFxuXG4gIGFzeW5jIHRlc3RDb25uZWN0aW9uKCkge1xuICAgIGxldCBjb25uZWN0aW9uO1xuICAgIHRyeSB7XG4gICAgICBjb25uZWN0aW9uID0gYXdhaXQgcG9vbC5nZXRDb25uZWN0aW9uKCk7XG4gICAgICBjb25zdCBbcmVzdWx0XSA9IGF3YWl0IGNvbm5lY3Rpb24ucXVlcnkoJ1NFTEVDVCBOT1coKSBhcyBgY3VycmVudF90aW1lYCwgVkVSU0lPTigpIGFzIG15c3FsX3ZlcnNpb24nKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGRhdGE6IHJlc3VsdFswXVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgY29ubmVjdGlvbiB0ZXN0IGZhaWxlZDonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICBjb25uZWN0aW9uLnJlbGVhc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07ICJdLCJuYW1lcyI6WyJwb29sIiwiZGF0YWJhc2VTZXJ2aWNlIiwicXVlcnkiLCJzcWwiLCJwYXJhbXMiLCJjb25uZWN0aW9uIiwiZ2V0Q29ubmVjdGlvbiIsInJvd3MiLCJleGVjdXRlIiwiZXJyb3IiLCJjb25zb2xlIiwicmVsZWFzZSIsInRyYW5zYWN0aW9uIiwiY2FsbGJhY2siLCJiZWdpblRyYW5zYWN0aW9uIiwicmVzdWx0IiwiY29tbWl0Iiwicm9sbGJhY2siLCJ0ZXN0Q29ubmVjdGlvbiIsInN1Y2Nlc3MiLCJkYXRhIiwiRXJyb3IiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/databaseService.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/orderModeService.ts":
/*!******************************************!*\
  !*** ./lib/services/orderModeService.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   orderModeService: () => (/* binding */ orderModeService)\n/* harmony export */ });\n/* harmony import */ var _databaseService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./databaseService */ \"(rsc)/./lib/services/databaseService.ts\");\n\nclass OrderModeService {\n    /**\n   * Get the current order mode from site settings\n   */ async getOrderMode() {\n        const now = Date.now();\n        // Return cached value if still valid\n        if (this.cachedOrderMode && now < this.cacheExpiry) {\n            return this.cachedOrderMode;\n        }\n        try {\n            const result = await _databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(\"SELECT setting_value FROM site_settings WHERE setting_key = ?\", [\n                \"order_mode\"\n            ]);\n            if (Array.isArray(result) && result.length > 0) {\n                this.cachedOrderMode = result[0].setting_value;\n            } else {\n                this.cachedOrderMode = \"stock_based\"; // Default fallback\n            }\n            this.cacheExpiry = now + this.CACHE_DURATION;\n            return this.cachedOrderMode;\n        } catch (error) {\n            console.error(\"Error fetching order mode:\", error);\n            return \"stock_based\"; // Default fallback\n        }\n    }\n    /**\n   * Check if a product is available for ordering\n   */ async checkProductAvailability(productId, requestedQuantity) {\n        try {\n            const result = await _databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(`SELECT p.id, p.name, p.stock_quantity, p.allow_out_of_stock_order, p.is_pack\n         FROM products p \n         WHERE p.id = ? AND p.is_active = true`, [\n                productId\n            ]);\n            if (!Array.isArray(result) || result.length === 0) {\n                return {\n                    isAvailable: false,\n                    status: \"out_of_stock\",\n                    message: \"Product not found\",\n                    allowsOutOfStock: false\n                };\n            }\n            const product = result[0];\n            const orderMode = await this.getOrderMode();\n            // In preorder mode, everything is available\n            if (orderMode === \"preorder\") {\n                return {\n                    isAvailable: true,\n                    status: \"preorder_available\",\n                    message: \"Available for preorder\",\n                    stockQuantity: product.stock_quantity,\n                    allowsOutOfStock: true\n                };\n            }\n            // Stock-based mode logic\n            if (product.stock_quantity >= requestedQuantity) {\n                const status = product.stock_quantity <= 5 ? \"low_stock\" : \"in_stock\";\n                return {\n                    isAvailable: true,\n                    status,\n                    message: status === \"low_stock\" ? \"Low stock available\" : \"In stock\",\n                    stockQuantity: product.stock_quantity,\n                    allowsOutOfStock: product.allow_out_of_stock_order\n                };\n            }\n            // Out of stock\n            if (product.allow_out_of_stock_order) {\n                return {\n                    isAvailable: true,\n                    status: \"out_of_stock\",\n                    message: \"Out of stock but available for order\",\n                    stockQuantity: product.stock_quantity,\n                    allowsOutOfStock: true\n                };\n            }\n            return {\n                isAvailable: false,\n                status: \"out_of_stock\",\n                message: \"Out of stock\",\n                stockQuantity: product.stock_quantity,\n                allowsOutOfStock: false\n            };\n        } catch (error) {\n            console.error(\"Error checking product availability:\", error);\n            return {\n                isAvailable: false,\n                status: \"out_of_stock\",\n                message: \"Error checking availability\",\n                allowsOutOfStock: false\n            };\n        }\n    }\n    /**\n   * Check if a flavor is available for ordering\n   */ async checkFlavorAvailability(flavorId, requestedQuantity, size = \"Large\") {\n        try {\n            const stockField = `stock_quantity_${size.toLowerCase()}`;\n            // Only allow valid stock fields\n            const validFields = [\n                \"stock_quantity_mini\",\n                \"stock_quantity_medium\",\n                \"stock_quantity_large\"\n            ];\n            if (!validFields.includes(stockField)) {\n                throw new Error(\"Invalid stock field\");\n            }\n            console.log(`🔍 [DEBUG] Checking flavor ${flavorId} availability:`, {\n                flavorId,\n                requestedQuantity,\n                size,\n                stockField\n            });\n            // Interpolate the column name directly into the SQL string\n            const sql = `SELECT f.id, f.name, f.allow_out_of_stock_order, f.${stockField} FROM flavors f WHERE f.id = ? AND f.is_active = true`;\n            const result = await _databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(sql, [\n                flavorId\n            ]);\n            console.log(`🔍 [DEBUG] Flavor ${flavorId} query result:`, result);\n            if (!Array.isArray(result) || result.length === 0) {\n                console.log(`❌ [DEBUG] Flavor ${flavorId} not found or inactive`);\n                return {\n                    isAvailable: false,\n                    status: \"out_of_stock\",\n                    message: \"Flavor not found\",\n                    allowsOutOfStock: false\n                };\n            }\n            const flavor = result[0];\n            const orderMode = await this.getOrderMode();\n            console.log(`🔍 [DEBUG] Flavor ${flavorId} data:`, {\n                id: flavor.id,\n                name: flavor.name,\n                allow_out_of_stock_order: flavor.allow_out_of_stock_order,\n                stockField: flavor[stockField],\n                orderMode\n            });\n            // In preorder mode, everything is available\n            if (orderMode === \"preorder\") {\n                console.log(`✅ [DEBUG] Flavor ${flavorId} available in preorder mode`);\n                return {\n                    isAvailable: true,\n                    status: \"preorder_available\",\n                    message: \"Available for preorder\",\n                    allowsOutOfStock: true\n                };\n            }\n            // Stock-based mode - check actual stock quantity\n            const currentStock = flavor[stockField] || 0;\n            console.log(`🔍 [DEBUG] Flavor ${flavorId} stock check:`, {\n                currentStock,\n                requestedQuantity,\n                isAvailable: currentStock >= requestedQuantity\n            });\n            if (currentStock >= requestedQuantity) {\n                const status = currentStock <= 5 ? \"low_stock\" : \"in_stock\";\n                console.log(`✅ [DEBUG] Flavor ${flavorId} available: ${status}`);\n                return {\n                    isAvailable: true,\n                    status: currentStock <= 5 ? \"low_stock\" : \"in_stock\",\n                    message: currentStock <= 5 ? \"Low stock\" : \"In stock\",\n                    stockQuantity: currentStock,\n                    allowsOutOfStock: flavor.allow_out_of_stock_order\n                };\n            } else if (flavor.allow_out_of_stock_order) {\n                console.log(`⚠️ [DEBUG] Flavor ${flavorId} out of stock but allows out-of-stock orders`);\n                return {\n                    isAvailable: true,\n                    status: \"out_of_stock\",\n                    message: \"Available for order\",\n                    stockQuantity: currentStock,\n                    allowsOutOfStock: true\n                };\n            }\n            console.log(`❌ [DEBUG] Flavor ${flavorId} out of stock and doesn't allow out-of-stock orders`);\n            return {\n                isAvailable: false,\n                status: \"out_of_stock\",\n                message: \"Flavor not available\",\n                stockQuantity: currentStock,\n                allowsOutOfStock: false\n            };\n        } catch (error) {\n            console.error(`❌ [DEBUG] Error checking flavor ${flavorId} availability:`, error);\n            return {\n                isAvailable: false,\n                status: \"out_of_stock\",\n                message: \"Error checking availability\",\n                allowsOutOfStock: false\n            };\n        }\n    }\n    /**\n   * Check cart items availability for checkout\n   */ async checkCartAvailability(cartItems) {\n        console.log(\"\\uD83D\\uDD0D [DEBUG] checkCartAvailability called with:\", cartItems);\n        const orderMode = await this.getOrderMode();\n        const outOfStockItems = [];\n        for (const item of cartItems){\n            console.log(\"\\uD83D\\uDD0D [DEBUG] Processing cart item:\", item);\n            if (item.isPack) {\n                // For packs, only check flavor availability (packs don't have their own stock)\n                if (item.flavors) {\n                    const packSize = item.packSize || \"Large\";\n                    console.log(\"\\uD83D\\uDD0D [DEBUG] Processing pack flavors:\", {\n                        packSize,\n                        flavors: item.flavors,\n                        packQuantity: item.quantity\n                    });\n                    for (const flavor of item.flavors){\n                        // FIXED: Multiply flavor quantity by pack quantity to get total needed\n                        const totalFlavorQuantity = flavor.quantity * item.quantity;\n                        console.log(\"\\uD83D\\uDD0D [DEBUG] Checking flavor availability:\", {\n                            flavorId: flavor.id,\n                            flavorName: flavor.name,\n                            flavorQuantity: flavor.quantity,\n                            packQuantity: item.quantity,\n                            totalFlavorQuantity,\n                            packSize\n                        });\n                        const flavorAvailability = await this.checkFlavorAvailability(flavor.id, totalFlavorQuantity, packSize);\n                        console.log(\"\\uD83D\\uDD0D [DEBUG] Flavor availability result:\", {\n                            flavorId: flavor.id,\n                            flavorName: flavor.name,\n                            isAvailable: flavorAvailability.isAvailable,\n                            status: flavorAvailability.status,\n                            stockQuantity: flavorAvailability.stockQuantity\n                        });\n                        if (!flavorAvailability.isAvailable) {\n                            // Get flavor name if not provided\n                            let flavorName = flavor.name;\n                            if (!flavorName) {\n                                const flavorResult = await _databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(\"SELECT name FROM flavors WHERE id = ?\", [\n                                    flavor.id\n                                ]);\n                                if (Array.isArray(flavorResult) && flavorResult.length > 0) {\n                                    flavorName = flavorResult[0].name;\n                                } else {\n                                    flavorName = `Flavor ${flavor.id}`;\n                                }\n                            }\n                            outOfStockItems.push({\n                                id: flavor.id,\n                                name: flavorName,\n                                type: \"flavor\",\n                                requestedQuantity: totalFlavorQuantity,\n                                availableQuantity: flavorAvailability.stockQuantity || 0,\n                                allowsOutOfStock: flavorAvailability.allowsOutOfStock\n                            });\n                        }\n                    }\n                }\n            } else {\n                // For non-pack items, check product availability\n                const productAvailability = await this.checkProductAvailability(item.productId, item.quantity);\n                if (!productAvailability.isAvailable) {\n                    outOfStockItems.push({\n                        id: item.productId,\n                        name: item.productName || `Product ${item.productId}`,\n                        type: \"product\",\n                        requestedQuantity: item.quantity,\n                        availableQuantity: productAvailability.stockQuantity || 0,\n                        allowsOutOfStock: productAvailability.allowsOutOfStock\n                    });\n                }\n            }\n        }\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Final outOfStockItems:\", outOfStockItems);\n        // In preorder mode, everything is available\n        if (orderMode === \"preorder\") {\n            console.log(\"✅ [DEBUG] Preorder mode - all items available\");\n            return {\n                isAvailable: true\n            };\n        }\n        // In stock-based mode, check if any items are truly unavailable\n        const trulyUnavailable = outOfStockItems.filter((item)=>!item.allowsOutOfStock);\n        console.log(\"\\uD83D\\uDD0D [DEBUG] Truly unavailable items:\", trulyUnavailable);\n        if (trulyUnavailable.length > 0) {\n            console.log(\"❌ [DEBUG] Some items are truly unavailable\");\n            return {\n                isAvailable: false,\n                reason: `Some items are out of stock and don't allow out-of-stock orders`,\n                outOfStockItems: trulyUnavailable\n            };\n        }\n        console.log(\"✅ [DEBUG] All items available or allow out-of-stock orders\");\n        return {\n            isAvailable: true,\n            outOfStockItems: outOfStockItems.length > 0 ? outOfStockItems : undefined\n        };\n    }\n    /**\n   * Get availability message for display\n   */ getAvailabilityMessage(availability) {\n        switch(availability.status){\n            case \"in_stock\":\n                return availability.stockQuantity ? `${availability.stockQuantity} in stock` : \"In stock\";\n            case \"low_stock\":\n                return availability.stockQuantity ? `Only ${availability.stockQuantity} left` : \"Low stock\";\n            case \"out_of_stock\":\n                return availability.allowsOutOfStock ? \"Out of stock but available for order\" : \"Out of stock\";\n            case \"preorder_available\":\n                return \"Available for preorder\";\n            default:\n                return \"Check availability\";\n        }\n    }\n    /**\n   * Get availability badge color\n   */ getAvailabilityBadgeColor(availability) {\n        switch(availability.status){\n            case \"in_stock\":\n                return \"bg-green-100 text-green-800\";\n            case \"low_stock\":\n                return \"bg-yellow-100 text-yellow-800\";\n            case \"out_of_stock\":\n                return availability.allowsOutOfStock ? \"bg-orange-100 text-orange-800\" : \"bg-red-100 text-red-800\";\n            case \"preorder_available\":\n                return \"bg-blue-100 text-blue-800\";\n            default:\n                return \"bg-gray-100 text-gray-800\";\n        }\n    }\n    constructor(){\n        this.cachedOrderMode = null;\n        this.cacheExpiry = 0;\n        this.CACHE_DURATION = 5 * 60 * 1000 // 5 minutes\n        ;\n    }\n}\nconst orderModeService = new OrderModeService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/orderModeService.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mysql2","vendor-chunks/aws-ssl-profiles","vendor-chunks/iconv-lite","vendor-chunks/long","vendor-chunks/lru-cache","vendor-chunks/denque","vendor-chunks/is-property","vendor-chunks/lru.min","vendor-chunks/sqlstring","vendor-chunks/seq-queue","vendor-chunks/named-placeholders","vendor-chunks/generate-function","vendor-chunks/safer-buffer","vendor-chunks/next-auth","vendor-chunks/@babel","vendor-chunks/openid-client","vendor-chunks/bcryptjs","vendor-chunks/oauth","vendor-chunks/object-hash","vendor-chunks/preact","vendor-chunks/preact-render-to-string","vendor-chunks/oidc-token-hash","vendor-chunks/@panva","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcheckout%2Fconfirm%2Froute&page=%2Fapi%2Fcheckout%2Fconfirm%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcheckout%2Fconfirm%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();