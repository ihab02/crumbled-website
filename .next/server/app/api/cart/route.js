(()=>{var e={};e.id=6453,e.ids=[6453],e.modules={62849:e=>{function r(e){var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}r.keys=()=>[],r.resolve=r,r.id=62849,e.exports=r},72934:e=>{"use strict";e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{"use strict";e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{"use strict";e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},78893:e=>{"use strict";e.exports=require("buffer")},84770:e=>{"use strict";e.exports=require("crypto")},17702:e=>{"use strict";e.exports=require("events")},98216:e=>{"use strict";e.exports=require("net")},35816:e=>{"use strict";e.exports=require("process")},76162:e=>{"use strict";e.exports=require("stream")},74026:e=>{"use strict";e.exports=require("string_decoder")},95346:e=>{"use strict";e.exports=require("timers")},82452:e=>{"use strict";e.exports=require("tls")},17360:e=>{"use strict";e.exports=require("url")},21764:e=>{"use strict";e.exports=require("util")},71568:e=>{"use strict";e.exports=require("zlib")},4567:(e,r,t)=>{"use strict";t.r(r),t.d(r,{originalPathname:()=>q,patchFetch:()=>S,requestAsyncStorage:()=>_,routeModule:()=>g,serverHooks:()=>E,staticGenerationAsyncStorage:()=>v});var a={};t.r(a),t.d(a,{DELETE:()=>y,GET:()=>m,POST:()=>f});var s=t(49303),o=t(88716),i=t(60670),c=t(87070),n=t(71615),l=t(79843),u=t(22439);async function d(){let e=(0,n.cookies)(),r=e.get("cart_id")?.value;if(r){let e=await u.databaseService.query('SELECT * FROM carts WHERE id = ? AND status = "active"',[r]);if(0===(Array.isArray(e)?e:e?[e]:[]).length){let e=(0,l.Z)();p(r=(await u.databaseService.query('INSERT INTO carts (session_id, status, created_at) VALUES (?, "active", NOW())',[e])).insertId.toString()),console.log("Created new cart (old one invalid):",r)}}else{let e=(0,l.Z)();p(r=(await u.databaseService.query('INSERT INTO carts (session_id, status, created_at) VALUES (?, "active", NOW())',[e])).insertId.toString()),console.log("Created new cart:",r)}return r}function p(e){(0,n.cookies)().set("cart_id",e,{httpOnly:!0,secure:!0,sameSite:"strict",maxAge:604800})}async function m(){try{let e=await d();console.log("GET /api/cart - Cart ID from cookie:",e);let r=await u.databaseService.query(`
      SELECT 
        ci.id,
        ci.quantity,
        ci.product_id,
        p.name as product_name,
        p.is_pack,
        p.base_price,
        p.flavor_size as size,
        p.image_url,
        p.count
      FROM cart_items ci
      JOIN products p ON ci.product_id = p.id
      WHERE ci.cart_id = ? AND p.is_active = true
      ORDER BY ci.id DESC
    `,[e]);console.log("Raw cartItems from database:",r),console.log("cartItems type:",typeof r),console.log("cartItems is array:",Array.isArray(r)),console.log("cartItems length:",Array.isArray(r)?r.length:"not array");let t=Array.isArray(r)?r:r?[r]:[];if(0===t.length)return console.log("No cart items found, returning empty cart"),c.NextResponse.json({items:[],total:0,itemCount:0});console.log("Cart items found:",t),console.log("Cart items array length:",t.length);let a=t.map(e=>({id:e.id,name:e.product_name||"",basePrice:Number(e.base_price),quantity:Number(e.quantity),isPack:!!e.is_pack,packSize:e.size||"",imageUrl:e.image_url||"",count:Number(e.count),flavorDetails:"",total:0,flavors:[]})),s=a.filter(e=>e.isPack);if(s.length>0){let e=s.map(e=>e.id);console.log("Fetching flavors for pack items:",e);let r=await u.databaseService.query(`
        SELECT 
          cif.cart_item_id,
          f.id as flavor_id,
          f.name as flavor_name,
          f.mini_price,
          f.medium_price,
          f.large_price,
          cif.quantity
        FROM cart_item_flavors cif
        JOIN flavors f ON cif.flavor_id = f.id
        WHERE cif.cart_item_id IN (${e.join(",")})
        ORDER BY cif.cart_item_id, f.name
      `);console.log("Raw flavor rows from database:",r),console.log("Flavor rows type:",typeof r),console.log("Flavor rows is array:",Array.isArray(r)),console.log("Flavor rows length:",Array.isArray(r)?r.length:"not array");let t=(Array.isArray(r)?r:r?[r]:[]).map(e=>({...e,mini_price:Number(e.mini_price),medium_price:Number(e.medium_price),large_price:Number(e.large_price),quantity:Number(e.quantity)}));console.log("Processed flavors array:",t),console.log("Processed flavors length:",t.length),a.forEach(e=>{if(e.isPack){let r=t.filter(r=>r.cart_item_id===e.id);console.log(`Processing flavors for item ${e.id}:`,r),console.log(`Item ${e.id} flavor count:`,r.length),e.flavors=r.map(r=>({id:r.flavor_id,name:r.flavor_name,quantity:r.quantity,price:"Large"===e.packSize?r.large_price:"Medium"===e.packSize?r.medium_price:r.mini_price,size:e.packSize})),console.log(`Final processed flavors for item ${e.id}:`,e.flavors),console.log(`Final flavor count for item ${e.id}:`,e.flavors.length)}})}let o=a.reduce((e,r)=>{let t=r.basePrice*r.quantity;return r.flavors&&r.flavors.length>0&&(t+=r.flavors.reduce((e,r)=>e+r.price*r.quantity,0)),e+t},0),i=a.reduce((e,r)=>e+r.quantity,0);return c.NextResponse.json({items:a,total:o,itemCount:i})}catch(e){return console.error("Error in GET /api/cart:",e),c.NextResponse.json({error:"Failed to fetch cart"},{status:500})}}async function f(e){try{let r=await e.json();console.log("POST /api/cart - Request body:",r);let t=await d();if(console.log("Cart ID:",t),!r.productId)return console.log("Missing productId, returning 400"),c.NextResponse.json({success:!1,error:"Product ID is required"},{status:400});console.log("Looking for product with ID:",r.productId);let[a]=await u.databaseService.query("SELECT * FROM products WHERE id = ? AND is_active = true",[r.productId]);console.log("Product query result:",a),console.log("Product result type:",typeof a),console.log("Product result is array:",Array.isArray(a)),console.log("Product result length:",Array.isArray(a)?a.length:"not array");let s=null;if(Array.isArray(a)?s=a.length>0?a[0]:null:a&&"object"==typeof a&&(s=a),!s)return console.log("Product not found, returning 404"),c.NextResponse.json({success:!1,error:"Product not found"},{status:404});if(console.log("Found product:",s),s.is_pack){if(!r.flavors||!Array.isArray(r.flavors)||0===r.flavors.length)return console.log("Flavors required for pack, returning 400"),c.NextResponse.json({success:!1,error:"Flavors are required for packs"},{status:400});let e=r.flavors.reduce((e,r)=>e+r.quantity,0);if(e!==s.count)return console.log(`Flavor quantity mismatch: ${e} != ${s.count}, returning 400`),c.NextResponse.json({success:!1,error:`Please select exactly ${s.count} flavors for this pack`},{status:400})}if(s.is_pack&&r.flavors&&r.flavors.length>0){console.log("Creating new cart item for pack with flavors");let e=await u.databaseService.query("INSERT INTO cart_items (cart_id, product_id, quantity, is_pack) VALUES (?, ?, ?, ?)",[t,s.id,r.quantity||1,s.is_pack]),a=Array.isArray(e)?e[0].insertId:e.insertId;for(let e of(console.log("Created cart item:",a),r.flavors))await u.databaseService.query("INSERT INTO cart_item_flavors (cart_item_id, flavor_id, quantity) VALUES (?, ?, ?)",[a,e.id,e.quantity]);return console.log("Successfully added pack with flavors to cart"),c.NextResponse.json({success:!0,cartItemId:a})}{let e=await u.databaseService.query("SELECT * FROM cart_items WHERE cart_id = ? AND product_id = ?",[t,s.id]);if(e.length>0)console.log("Updating existing cart item:",e[0].id),await u.databaseService.query("UPDATE cart_items SET quantity = quantity + ? WHERE id = ?",[r.quantity||1,e[0].id]);else{console.log("Creating new cart item for product:",s.id);let e=await u.databaseService.query("INSERT INTO cart_items (cart_id, product_id, quantity, is_pack) VALUES (?, ?, ?, ?)",[t,s.id,r.quantity||1,s.is_pack]),a=Array.isArray(e)?e[0].insertId:e.insertId;console.log("Created cart item:",a)}return console.log("Successfully added to cart"),c.NextResponse.json({success:!0})}}catch(e){return console.error("Error adding to cart:",e),c.NextResponse.json({success:!1,error:"Failed to add to cart"},{status:500})}}async function y(e){try{let r=await d(),{itemId:t}=await e.json();if(!t)return c.NextResponse.json({success:!1,error:"Item ID is required"},{status:400});return await u.databaseService.query("DELETE FROM cart_item_flavors WHERE cart_item_id = ?",[t]),await u.databaseService.query("DELETE FROM cart_items WHERE id = ? AND cart_id = ?",[t,r]),console.log("Removed item from cart:",t),c.NextResponse.json({success:!0})}catch(e){return console.error("Error in DELETE /api/cart:",e),c.NextResponse.json({success:!1,error:"Failed to remove item"},{status:500})}}let g=new s.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/cart/route",pathname:"/api/cart",filename:"route",bundlePath:"app/api/cart/route"},resolvedPagePath:"C:\\Users\\ASUS\\AngularWebApp\\crumbled-website\\app\\api\\cart\\route.ts",nextConfigOutput:"standalone",userland:a}),{requestAsyncStorage:_,staticGenerationAsyncStorage:v,serverHooks:E}=g,q="/api/cart/route";function S(){return(0,i.patchFetch)({serverHooks:E,staticGenerationAsyncStorage:v})}},9487:(e,r,t)=>{"use strict";t.d(r,{M7:()=>s,ZP:()=>i,Zh:()=>o});let a=t(73785).createPool({host:process.env.DB_HOST||"localhost",user:process.env.DB_USER||"root",password:process.env.DB_PASSWORD||"Goodmorning@1",database:process.env.DB_NAME||"crumbled_nextDB",waitForConnections:!0,connectionLimit:10,queueLimit:0,enableKeepAlive:!0,keepAliveInitialDelay:1e4,idleTimeout:6e4,maxIdle:5});async function s(){let e;try{e=await a.getConnection();let[r]=await e.query("SELECT NOW() as `current_time`, VERSION() as mysql_version");return{success:!0,message:"Database connected successfully",timestamp:r[0].current_time,version:r[0].mysql_version}}catch(e){return console.error("Database connection failed:",e),{success:!1,error:e instanceof Error?e.message:"Unknown connection error"}}finally{e&&e.release()}}async function o(e,r){let t;try{t=await a.getConnection();let[s]=await t.query("SELECT * FROM orders WHERE tracking_id = ? AND customer_email = ?",[e,r]);if(0===s.length)return{success:!1,error:"Order not found or email doesn't match"};let[o]=await t.query("SELECT * FROM order_items WHERE order_id = ?",[s[0].id]);return{success:!0,order:s[0],items:o}}catch(e){return console.error("Error fetching order by tracking:",e),{success:!1,error:e instanceof Error?e.message:"Database operation failed"}}finally{t&&t.release()}}let i=a},22439:(e,r,t)=>{"use strict";t.d(r,{databaseService:()=>s});var a=t(9487);let s={async query(e,r){let t;try{t=await a.ZP.getConnection();let[s]=await t.execute(e,r);return s}catch(e){throw console.error("Database query error:",e),e}finally{t&&t.release()}},async transaction(e){let r=await a.ZP.getConnection();try{await r.beginTransaction();let t=await e(r);return await r.commit(),t}catch(e){throw await r.rollback(),e}finally{r.release()}},async testConnection(){let e;try{e=await a.ZP.getConnection();let[r]=await e.query("SELECT NOW() as `current_time`, VERSION() as mysql_version");return{success:!0,data:r[0]}}catch(e){return console.error("Database connection test failed:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error"}}finally{e&&e.release()}}}}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),a=r.X(0,[9276,5972,3785,8182],()=>t(4567));module.exports=a})();