/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/auth/otp/route";
exports.ids = ["app/api/auth/otp/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$":
/*!****************************************************!*\
  !*** ./node_modules/mysql2/lib/ sync ^cardinal.*$ ***!
  \****************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "./action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/client/components/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/action-async-storage.external.js");

/***/ }),

/***/ "./request-async-storage.external":
/*!********************************************************************************!*\
  !*** external "next/dist/client/components/request-async-storage.external.js" ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/request-async-storage.external.js");

/***/ }),

/***/ "./static-generation-async-storage.external":
/*!******************************************************************************************!*\
  !*** external "next/dist/client/components/static-generation-async-storage.external.js" ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/client/components/static-generation-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fotp%2Froute&page=%2Fapi%2Fauth%2Fotp%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fotp%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fotp%2Froute&page=%2Fapi%2Fauth%2Fotp%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fotp%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_ASUS_AngularWebApp_crumbled_website_app_api_auth_otp_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/auth/otp/route.ts */ \"(rsc)/./app/api/auth/otp/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/auth/otp/route\",\n        pathname: \"/api/auth/otp\",\n        filename: \"route\",\n        bundlePath: \"app/api/auth/otp/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\ASUS\\\\AngularWebApp\\\\crumbled-website\\\\app\\\\api\\\\auth\\\\otp\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_ASUS_AngularWebApp_crumbled_website_app_api_auth_otp_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/auth/otp/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhdXRoJTJGb3RwJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhdXRoJTJGb3RwJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYXV0aCUyRm90cCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNBU1VTJTVDQW5ndWxhcldlYkFwcCU1Q2NydW1ibGVkLXdlYnNpdGUlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q0FTVVMlNUNBbmd1bGFyV2ViQXBwJTVDY3J1bWJsZWQtd2Vic2l0ZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDK0I7QUFDNUc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnVtYmxlZC13ZWJzaXRlLz8xZTY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXEFTVVNcXFxcQW5ndWxhcldlYkFwcFxcXFxjcnVtYmxlZC13ZWJzaXRlXFxcXGFwcFxcXFxhcGlcXFxcYXV0aFxcXFxvdHBcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2F1dGgvb3RwL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXV0aC9vdHBcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2F1dGgvb3RwL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcQVNVU1xcXFxBbmd1bGFyV2ViQXBwXFxcXGNydW1ibGVkLXdlYnNpdGVcXFxcYXBwXFxcXGFwaVxcXFxhdXRoXFxcXG90cFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvYXV0aC9vdHAvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fotp%2Froute&page=%2Fapi%2Fauth%2Fotp%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fotp%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/auth/otp/route.ts":
/*!***********************************!*\
  !*** ./app/api/auth/otp/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/services/databaseService */ \"(rsc)/./lib/services/databaseService.ts\");\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var _lib_sms_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/sms-service */ \"(rsc)/./lib/sms-service.ts\");\n\n\n\n\n// This will be replaced with actual SMS gateway integration\nconst sendOTP = async (phone, otp)=>{\n    // TODO: Integrate with SMS gateway\n    console.log(`Sending OTP ${otp} to ${phone}`);\n    return true;\n};\nasync function POST(request) {\n    try {\n        const { phone } = await request.json();\n        if (!phone) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Phone number is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Check if phone is already verified in session\n        const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_2__.cookies)();\n        const verifiedPhones = cookieStore.get(\"verified_phones\");\n        if (verifiedPhones) {\n            const phones = JSON.parse(verifiedPhones.value);\n            if (phones.includes(phone)) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    message: \"Phone number already verified\"\n                });\n            }\n        }\n        // Check if phone belongs to a registered customer\n        const [customerResult] = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.query(\"SELECT id FROM customers WHERE phone = ?\", [\n            phone\n        ]);\n        if (Array.isArray(customerResult) && customerResult.length > 0) {\n            // Phone belongs to a registered customer, no need for OTP\n            const phones = verifiedPhones ? JSON.parse(verifiedPhones.value) : [];\n            phones.push(phone);\n            cookieStore.set(\"verified_phones\", JSON.stringify(phones), {\n                httpOnly: true,\n                secure: \"development\" === \"production\",\n                sameSite: \"strict\",\n                maxAge: 7 * 24 * 60 * 60 // 7 days\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: \"Phone number verified (registered customer)\"\n            });\n        }\n        // Generate a 6-digit OTP\n        const otp = Math.floor(100000 + Math.random() * 900000).toString();\n        console.log(\"\\uD83D\\uDD11 Generated OTP:\", otp);\n        // Set expiration time (10 minutes from now) in MySQL format\n        const expiresAt = new Date();\n        expiresAt.setMinutes(expiresAt.getMinutes() + 10);\n        const mysqlExpiresAt = expiresAt.toISOString().slice(0, 19).replace(\"T\", \" \");\n        console.log(\"⏰ Expires at:\", mysqlExpiresAt);\n        // Send OTP via SMS (this will also store it in database)\n        const smsResult = await (0,_lib_sms_service__WEBPACK_IMPORTED_MODULE_3__.sendVerificationCode)(phone, otp);\n        if (!smsResult.success) {\n            console.error(\"SMS sending failed\");\n            // For development/testing, return the OTP in the response\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: \"OTP generated (SMS service configuration issue)\",\n                debug: {\n                    otp,\n                    note: \"OTP displayed due to SMS service configuration issues\"\n                }\n            });\n        }\n        // In development mode, also return the OTP for testing\n        if (true) {\n            console.log(\"\\uD83D\\uDD11 [DEV MODE] OTP for testing:\", otp);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: \"OTP sent successfully\",\n                debug: {\n                    otp,\n                    note: \"OTP displayed for development testing\"\n                }\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"OTP sent successfully\"\n        });\n    } catch (error) {\n        console.error(\"Error sending OTP:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to send OTP\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PUT(request) {\n    try {\n        const { phone, otp } = await request.json();\n        console.log(\"\\uD83D\\uDD0D Verifying OTP:\", {\n            phone,\n            otp\n        });\n        if (!phone || !otp) {\n            console.log(\"❌ Missing phone or OTP\");\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Phone number and OTP are required\"\n            }, {\n                status: 400\n            });\n        }\n        // Check if phone is already verified in session\n        const cookieStore = (0,next_headers__WEBPACK_IMPORTED_MODULE_2__.cookies)();\n        const verifiedPhones = cookieStore.get(\"verified_phones\");\n        if (verifiedPhones) {\n            const phones = JSON.parse(verifiedPhones.value);\n            if (phones.includes(phone)) {\n                console.log(\"✅ Phone already verified in session\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    message: \"Phone number already verified\"\n                });\n            }\n        }\n        // Check if phone belongs to a registered customer\n        const [customerResult] = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.query(\"SELECT id FROM customers WHERE phone = ?\", [\n            phone\n        ]);\n        if (Array.isArray(customerResult) && customerResult.length > 0) {\n            console.log(\"✅ Phone belongs to registered customer\");\n            // Phone belongs to a registered customer, no need for OTP\n            const phones = verifiedPhones ? JSON.parse(verifiedPhones.value) : [];\n            phones.push(phone);\n            cookieStore.set(\"verified_phones\", JSON.stringify(phones), {\n                httpOnly: true,\n                secure: \"development\" === \"production\",\n                sameSite: \"strict\",\n                maxAge: 7 * 24 * 60 * 60 // 7 days\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: \"Phone number verified (registered customer)\"\n            });\n        }\n        // Verify OTP\n        console.log(\"\\uD83D\\uDD0D Checking OTP in database...\");\n        console.log(\"\\uD83D\\uDCF1 Phone:\", phone);\n        console.log(\"\\uD83D\\uDD11 OTP:\", otp);\n        // Format phone number to match what's stored in database\n        const formattedPhone = phone.replace(/\\D/g, \"\");\n        console.log(\"\\uD83D\\uDCF1 Formatted phone:\", formattedPhone);\n        try {\n            // Step 1: Get the LATEST OTP for this phone (most recent one)\n            const [latestOtpResult] = await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.query(\"SELECT id, phone, verification_code, created_at, expires_at, is_verified FROM phone_verification WHERE phone = ? ORDER BY created_at DESC LIMIT 1\", [\n                formattedPhone\n            ]);\n            const latestOtp = Array.isArray(latestOtpResult) ? latestOtpResult[0] : latestOtpResult;\n            if (!latestOtp) {\n                console.log(\"❌ No OTP found for this phone\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid or expired OTP\"\n                }, {\n                    status: 400\n                });\n            }\n            console.log(\"\\uD83D\\uDD0D Latest OTP record:\", latestOtp);\n            console.log(\"\\uD83D\\uDD0D Expected OTP:\", latestOtp.verification_code);\n            console.log(\"\\uD83D\\uDD0D Provided OTP:\", otp);\n            // Step 2: Check if the provided OTP matches the latest one\n            if (latestOtp.verification_code !== otp) {\n                console.log(\"❌ OTP does not match the latest one\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"Invalid or expired OTP\"\n                }, {\n                    status: 400\n                });\n            }\n            // Step 3: Check if the latest OTP is already verified\n            if (latestOtp.is_verified) {\n                console.log(\"❌ OTP has already been verified\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"OTP has already been used\"\n                }, {\n                    status: 400\n                });\n            }\n            // Step 4: Check if OTP is expired\n            const now = new Date();\n            const expiresAt = new Date(latestOtp.expires_at);\n            console.log(\"⏰ Current time:\", now.toISOString());\n            console.log(\"⏰ Expires at:\", expiresAt.toISOString());\n            console.log(\"⏰ Is expired:\", now > expiresAt);\n            if (now > expiresAt) {\n                console.log(\"❌ OTP has expired\");\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: \"OTP has expired\"\n                }, {\n                    status: 400\n                });\n            }\n            // Step 5: Mark OTP as verified\n            console.log(\"✅ Marking OTP as verified\");\n            const updateQuery = \"UPDATE phone_verification SET is_verified = true WHERE id = ?\";\n            console.log(\"\\uD83D\\uDCDD Update query:\", updateQuery);\n            console.log(\"\\uD83D\\uDD22 Update params:\", [\n                latestOtp.id\n            ]);\n            await _lib_services_databaseService__WEBPACK_IMPORTED_MODULE_1__.databaseService.query(updateQuery, [\n                latestOtp.id\n            ]);\n            console.log(\"✅ OTP marked as verified\");\n        } catch (error) {\n            console.error(\"❌ Database error:\", error);\n            throw error;\n        }\n        // Add phone to verified phones in session\n        const phones = verifiedPhones ? JSON.parse(verifiedPhones.value) : [];\n        phones.push(phone);\n        cookieStore.set(\"verified_phones\", JSON.stringify(phones), {\n            httpOnly: true,\n            secure: \"development\" === \"production\",\n            sameSite: \"strict\",\n            maxAge: 7 * 24 * 60 * 60 // 7 days\n        });\n        console.log(\"✅ OTP verification successful\");\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"OTP verified successfully\"\n        });\n    } catch (error) {\n        console.error(\"❌ Error verifying OTP:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to verify OTP\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/auth/otp/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getOrderByTracking: () => (/* binding */ getOrderByTracking),\n/* harmony export */   getOrderDetails: () => (/* binding */ getOrderDetails),\n/* harmony export */   getOrders: () => (/* binding */ getOrders),\n/* harmony export */   saveOrder: () => (/* binding */ saveOrder),\n/* harmony export */   testConnection: () => (/* binding */ testConnection),\n/* harmony export */   updateOrderStatus: () => (/* binding */ updateOrderStatus)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"(rsc)/./node_modules/mysql2/promise.js\");\n\n// Create MySQL connection pool\nconst pool = mysql2_promise__WEBPACK_IMPORTED_MODULE_0__.createPool({\n    host: process.env.DB_HOST || \"localhost\",\n    user: process.env.DB_USER || \"root\",\n    password: process.env.DB_PASSWORD || \"Goodmorning@1\",\n    database: process.env.DB_NAME || \"crumbled_nextDB\",\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n    enableKeepAlive: true,\n    keepAliveInitialDelay: 10000,\n    idleTimeout: 60000,\n    maxIdle: 5 // Maximum number of idle connections to keep\n});\n// Test connection function\nasync function testConnection() {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        const [result] = await connection.query(\"SELECT NOW() as current_time, VERSION() as mysql_version\");\n        return {\n            success: true,\n            message: \"Database connected successfully\",\n            timestamp: result[0].current_time,\n            version: result[0].mysql_version\n        };\n    } catch (error) {\n        console.error(\"Database connection failed:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown connection error\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function saveOrder(orderData) {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        // Check if orders table exists\n        const [tableCheck] = await connection.query(\"SELECT COUNT(*) as count FROM information_schema.tables WHERE table_schema = 'crumbled_nextDB' AND table_name = 'orders'\");\n        if (tableCheck[0].count === 0) {\n            return {\n                success: false,\n                error: \"Orders table does not exist. Please set up the database first.\"\n            };\n        }\n        // Generate tracking ID if not provided\n        if (!orderData.trackingId) {\n            orderData.trackingId = `CC${Math.random().toString(36).substring(2, 10).toUpperCase()}`;\n        }\n        // Start transaction by inserting order first\n        const [orderResult] = await connection.query(`INSERT INTO orders (\n        customer_name, \n        customer_email, \n        customer_phone, \n        address, \n        city, \n        state, \n        zip_code, \n        total_amount,\n        tracking_id,\n        order_status\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending')`, [\n            orderData.customerName,\n            orderData.customerEmail,\n            orderData.customerPhone,\n            orderData.address,\n            orderData.city,\n            orderData.state,\n            orderData.zipCode,\n            orderData.totalAmount,\n            orderData.trackingId || `CC${Math.random().toString(36).substring(2, 10).toUpperCase()}`\n        ]);\n        const orderId = orderResult.insertId;\n        // Process each item and update stock\n        for (const item of orderData.items){\n            // Insert order item\n            await connection.query(`INSERT INTO order_items (\n          order_id, \n          product_id, \n          product_name, \n          quantity, \n          price, \n          is_bundle, \n          bundle_size, \n          bundle_items\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`, [\n                orderId,\n                item.id,\n                item.name,\n                item.quantity,\n                item.price,\n                !!item.isBundle,\n                item.bundleSize || null,\n                item.bundleItems ? JSON.stringify(item.bundleItems) : null\n            ]);\n            // Update stock for individual items\n            if (!item.isBundle) {\n                // For regular items, reduce stock directly\n                const [stockUpdate] = await connection.query(`UPDATE stock \n           SET quantity = quantity - ?, updated_at = CURRENT_TIMESTAMP\n           WHERE product_id = ?\n           RETURNING quantity`, [\n                    item.quantity,\n                    item.id\n                ]);\n                // Check if stock went negative (optional warning)\n                if (stockUpdate.length > 0 && stockUpdate[0].quantity < 0) {\n                    console.warn(`Warning: Stock for product ${item.name} (ID: ${item.id}) went negative: ${stockUpdate[0].quantity}`);\n                }\n            } else {\n                // For bundles, reduce stock for each bundled item\n                if (item.bundleItems && Array.isArray(item.bundleItems)) {\n                    for (const bundleItem of item.bundleItems){\n                        const [stockUpdate] = await connection.query(`UPDATE stock \n               SET quantity = quantity - ?, updated_at = CURRENT_TIMESTAMP\n               WHERE product_id = ?\n               RETURNING quantity, product_name`, [\n                            item.quantity,\n                            bundleItem.id\n                        ]);\n                        if (stockUpdate.length > 0 && stockUpdate[0].quantity < 0) {\n                            console.warn(`Warning: Stock for bundled product ${stockUpdate[0].product_name} (ID: ${bundleItem.id}) went negative: ${stockUpdate[0].quantity}`);\n                        }\n                    }\n                }\n            }\n        }\n        return {\n            success: true,\n            orderId,\n            trackingId: orderData.trackingId\n        };\n    } catch (error) {\n        console.error(\"Error saving order:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database operation failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function getOrders() {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        // Check if orders table exists\n        const [tableCheck] = await connection.query(\"SELECT COUNT(*) as count FROM information_schema.tables WHERE table_schema = 'crumbled_nextDB' AND table_name = 'orders'\");\n        if (tableCheck[0].count === 0) {\n            return {\n                success: false,\n                error: \"Orders table does not exist. Please set up the database first.\"\n            };\n        }\n        const [orders] = await connection.query(\"SELECT * FROM orders ORDER BY created_at DESC\");\n        return {\n            success: true,\n            orders\n        };\n    } catch (error) {\n        console.error(\"Error fetching orders:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database connection failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function getOrderDetails(orderId) {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        const [order] = await connection.query(\"SELECT * FROM orders WHERE id = ?\", [\n            orderId\n        ]);\n        if (order.length === 0) {\n            return {\n                success: false,\n                error: \"Order not found\"\n            };\n        }\n        const [items] = await connection.query(\"SELECT * FROM order_items WHERE order_id = ?\", [\n            orderId\n        ]);\n        return {\n            success: true,\n            order: order[0],\n            items\n        };\n    } catch (error) {\n        console.error(\"Error fetching order details:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database operation failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function getOrderByTracking(trackingId, email) {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        const [order] = await connection.query(\"SELECT * FROM orders WHERE tracking_id = ? AND customer_email = ?\", [\n            trackingId,\n            email\n        ]);\n        if (order.length === 0) {\n            return {\n                success: false,\n                error: \"Order not found\"\n            };\n        }\n        const [items] = await connection.query(\"SELECT * FROM order_items WHERE order_id = ?\", [\n            order[0].id\n        ]);\n        return {\n            success: true,\n            order: order[0],\n            items\n        };\n    } catch (error) {\n        console.error(\"Error fetching order by tracking:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database operation failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\nasync function updateOrderStatus(orderId, status) {\n    let connection;\n    try {\n        connection = await pool.getConnection();\n        await connection.query(\"UPDATE orders SET order_status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?\", [\n            status,\n            orderId\n        ]);\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error updating order status:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Database operation failed\"\n        };\n    } finally{\n        if (connection) {\n            connection.release();\n        }\n    }\n}\n// Export the pool as default\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pool);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./lib/services/databaseService.ts":
/*!*****************************************!*\
  !*** ./lib/services/databaseService.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   databaseService: () => (/* binding */ databaseService)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.ts\");\n\nconst databaseService = {\n    async query (sql, params) {\n        let connection;\n        try {\n            connection = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getConnection();\n            const [rows] = await connection.execute(sql, params);\n            return rows;\n        } catch (error) {\n            console.error(\"Database query error:\", error);\n            throw error;\n        } finally{\n            if (connection) {\n                connection.release();\n            }\n        }\n    },\n    async transaction (callback) {\n        const connection = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getConnection();\n        try {\n            await connection.beginTransaction();\n            const result = await callback(connection);\n            await connection.commit();\n            return result;\n        } catch (error) {\n            await connection.rollback();\n            throw error;\n        } finally{\n            connection.release();\n        }\n    },\n    async testConnection () {\n        let connection;\n        try {\n            connection = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getConnection();\n            const [result] = await connection.query(\"SELECT NOW() as current_time, VERSION() as mysql_version\");\n            return {\n                success: true,\n                data: result[0]\n            };\n        } catch (error) {\n            console.error(\"Database connection test failed:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error\"\n            };\n        } finally{\n            if (connection) {\n                connection.release();\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc2VydmljZXMvZGF0YWJhc2VTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQzRCO0FBRXJCLE1BQU1DLGtCQUFrQjtJQUM3QixNQUFNQyxPQUFlQyxHQUFXLEVBQUVDLE1BQWM7UUFDOUMsSUFBSUM7UUFDSixJQUFJO1lBQ0ZBLGFBQWEsTUFBTUwsK0NBQUlBLENBQUNNLGFBQWE7WUFDckMsTUFBTSxDQUFDQyxLQUFLLEdBQUcsTUFBTUYsV0FBV0csT0FBTyxDQUFDTCxLQUFLQztZQUM3QyxPQUFPRztRQUNULEVBQUUsT0FBT0UsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMseUJBQXlCQTtZQUN2QyxNQUFNQTtRQUNSLFNBQVU7WUFDUixJQUFJSixZQUFZO2dCQUNkQSxXQUFXTSxPQUFPO1lBQ3BCO1FBQ0Y7SUFDRjtJQUVBLE1BQU1DLGFBQWVDLFFBQXNEO1FBQ3pFLE1BQU1SLGFBQWEsTUFBTUwsK0NBQUlBLENBQUNNLGFBQWE7UUFDM0MsSUFBSTtZQUNGLE1BQU1ELFdBQVdTLGdCQUFnQjtZQUNqQyxNQUFNQyxTQUFTLE1BQU1GLFNBQVNSO1lBQzlCLE1BQU1BLFdBQVdXLE1BQU07WUFDdkIsT0FBT0Q7UUFDVCxFQUFFLE9BQU9OLE9BQU87WUFDZCxNQUFNSixXQUFXWSxRQUFRO1lBQ3pCLE1BQU1SO1FBQ1IsU0FBVTtZQUNSSixXQUFXTSxPQUFPO1FBQ3BCO0lBQ0Y7SUFFQSxNQUFNTztRQUNKLElBQUliO1FBQ0osSUFBSTtZQUNGQSxhQUFhLE1BQU1MLCtDQUFJQSxDQUFDTSxhQUFhO1lBQ3JDLE1BQU0sQ0FBQ1MsT0FBTyxHQUFHLE1BQU1WLFdBQVdILEtBQUssQ0FBd0I7WUFDL0QsT0FBTztnQkFDTGlCLFNBQVM7Z0JBQ1RDLE1BQU1MLE1BQU0sQ0FBQyxFQUFFO1lBQ2pCO1FBQ0YsRUFBRSxPQUFPTixPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyxvQ0FBb0NBO1lBQ2xELE9BQU87Z0JBQ0xVLFNBQVM7Z0JBQ1RWLE9BQU9BLGlCQUFpQlksUUFBUVosTUFBTWEsT0FBTyxHQUFHO1lBQ2xEO1FBQ0YsU0FBVTtZQUNSLElBQUlqQixZQUFZO2dCQUNkQSxXQUFXTSxPQUFPO1lBQ3BCO1FBQ0Y7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnVtYmxlZC13ZWJzaXRlLy4vbGliL3NlcnZpY2VzL2RhdGFiYXNlU2VydmljZS50cz9iODRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBteXNxbCBmcm9tICdteXNxbDIvcHJvbWlzZSc7XG5pbXBvcnQgcG9vbCBmcm9tICdAL2xpYi9kYic7XG5cbmV4cG9ydCBjb25zdCBkYXRhYmFzZVNlcnZpY2UgPSB7XG4gIGFzeW5jIHF1ZXJ5PFQgPSBhbnk+KHNxbDogc3RyaW5nLCBwYXJhbXM/OiBhbnlbXSk6IFByb21pc2U8VD4ge1xuICAgIGxldCBjb25uZWN0aW9uO1xuICAgIHRyeSB7XG4gICAgICBjb25uZWN0aW9uID0gYXdhaXQgcG9vbC5nZXRDb25uZWN0aW9uKCk7XG4gICAgICBjb25zdCBbcm93c10gPSBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGUoc3FsLCBwYXJhbXMpO1xuICAgICAgcmV0dXJuIHJvd3MgYXMgVDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgcXVlcnkgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgIGNvbm5lY3Rpb24ucmVsZWFzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBhc3luYyB0cmFuc2FjdGlvbjxUPihjYWxsYmFjazogKGNvbm5lY3Rpb246IG15c3FsLkNvbm5lY3Rpb24pID0+IFByb21pc2U8VD4pOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgcG9vbC5nZXRDb25uZWN0aW9uKCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNvbm5lY3Rpb24uYmVnaW5UcmFuc2FjdGlvbigpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbGJhY2soY29ubmVjdGlvbik7XG4gICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbW1pdCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgYXdhaXQgY29ubmVjdGlvbi5yb2xsYmFjaygpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGNvbm5lY3Rpb24ucmVsZWFzZSgpO1xuICAgIH1cbiAgfSxcblxuICBhc3luYyB0ZXN0Q29ubmVjdGlvbigpIHtcbiAgICBsZXQgY29ubmVjdGlvbjtcbiAgICB0cnkge1xuICAgICAgY29ubmVjdGlvbiA9IGF3YWl0IHBvb2wuZ2V0Q29ubmVjdGlvbigpO1xuICAgICAgY29uc3QgW3Jlc3VsdF0gPSBhd2FpdCBjb25uZWN0aW9uLnF1ZXJ5PG15c3FsLlJvd0RhdGFQYWNrZXRbXT4oJ1NFTEVDVCBOT1coKSBhcyBjdXJyZW50X3RpbWUsIFZFUlNJT04oKSBhcyBteXNxbF92ZXJzaW9uJyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiByZXN1bHRbMF1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gdGVzdCBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgfTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKGNvbm5lY3Rpb24pIHtcbiAgICAgICAgY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59OyAiXSwibmFtZXMiOlsicG9vbCIsImRhdGFiYXNlU2VydmljZSIsInF1ZXJ5Iiwic3FsIiwicGFyYW1zIiwiY29ubmVjdGlvbiIsImdldENvbm5lY3Rpb24iLCJyb3dzIiwiZXhlY3V0ZSIsImVycm9yIiwiY29uc29sZSIsInJlbGVhc2UiLCJ0cmFuc2FjdGlvbiIsImNhbGxiYWNrIiwiYmVnaW5UcmFuc2FjdGlvbiIsInJlc3VsdCIsImNvbW1pdCIsInJvbGxiYWNrIiwidGVzdENvbm5lY3Rpb24iLCJzdWNjZXNzIiwiZGF0YSIsIkVycm9yIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/services/databaseService.ts\n");

/***/ }),

/***/ "(rsc)/./lib/sms-service.ts":
/*!****************************!*\
  !*** ./lib/sms-service.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendOTP: () => (/* binding */ sendOTP),\n/* harmony export */   sendOrderConfirmation: () => (/* binding */ sendOrderConfirmation),\n/* harmony export */   sendOrderStatusUpdate: () => (/* binding */ sendOrderStatusUpdate),\n/* harmony export */   sendVerificationCode: () => (/* binding */ sendVerificationCode),\n/* harmony export */   verifyCode: () => (/* binding */ verifyCode)\n/* harmony export */ });\n/* harmony import */ var _services_databaseService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./services/databaseService */ \"(rsc)/./lib/services/databaseService.ts\");\n// This file is not used. Remove or update as needed.\n// const sql = neon(process.env.DATABASE_URL!)\n\nclass CustomSMSService {\n    constructor(){\n        this.config = {\n            baseUrl: \"http://3.250.91.63:1880\",\n            senderName: \"Manex\"\n        };\n        console.log(\"SMS Service initialized with config:\", {\n            baseUrl: this.config.baseUrl,\n            senderName: this.config.senderName\n        });\n    }\n    async sendSMS(phone, message) {\n        try {\n            // Format phone number for Egyptian numbers\n            const formattedPhone = this.formatPhoneNumber(phone);\n            // In development, log to console instead of sending SMS\n            if (true) {\n                console.log(\"\\uD83D\\uDCF1 [DEV MODE] SMS would be sent:\");\n                console.log(\"   To:\", formattedPhone);\n                console.log(\"   Message:\", message);\n                console.log(\"   Sender:\", this.config.senderName);\n                console.log(\"   URL:\", `${this.config.baseUrl}/sendSMS`);\n                return {\n                    success: true,\n                    messageId: `dev_${Date.now()}`,\n                    status: \"sent\",\n                    message: \"SMS logged to console (development mode)\",\n                    rawResponse: {\n                        development: true\n                    }\n                };\n            }\n            const smsUrl = `${this.config.baseUrl}/sendSMS`;\n            console.log(`🚀 Sending SMS to ${formattedPhone}`);\n            console.log(`📡 SMS URL: ${smsUrl}`);\n            const payload = {\n                senderName: this.config.senderName,\n                messageType: \"text\",\n                shortURL: false,\n                recipients: formattedPhone,\n                messageText: message\n            };\n            console.log(\"\\uD83D\\uDCE6 SMS Payload:\", JSON.stringify(payload, null, 2));\n            // Add timeout to the fetch request\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 15000) // 15 second timeout\n            ;\n            let response;\n            try {\n                console.log(\"\\uD83D\\uDCE4 Sending SMS request...\");\n                response = await fetch(smsUrl, {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Accept: \"application/json\",\n                        \"User-Agent\": \"CrumbledCookies/1.0\"\n                    },\n                    body: JSON.stringify(payload),\n                    signal: controller.signal\n                });\n                console.log(\"\\uD83D\\uDCE5 Received SMS response\");\n            } catch (fetchError) {\n                clearTimeout(timeoutId);\n                console.error(\"❌ SMS request failed:\", fetchError);\n                if (fetchError instanceof Error && fetchError.name === \"AbortError\") {\n                    throw new Error(\"SMS request timed out after 15 seconds\");\n                }\n                throw new Error(`Network error: ${fetchError instanceof Error ? fetchError.message : \"Unknown error\"}`);\n            }\n            clearTimeout(timeoutId);\n            console.log(`📨 SMS Response Status: ${response.status} ${response.statusText}`);\n            let responseText;\n            try {\n                responseText = await response.text();\n                console.log(\"\\uD83D\\uDCE8 SMS Response Body:\", responseText);\n            } catch (textError) {\n                console.error(\"❌ Failed to read SMS response:\", textError);\n                throw new Error(\"Failed to read SMS service response\");\n            }\n            let result;\n            try {\n                result = JSON.parse(responseText);\n                console.log(\"✅ Parsed JSON response:\", result);\n            } catch (parseError) {\n                console.log(\"⚠️ Response is not JSON, treating as text\");\n                result = {\n                    rawResponse: responseText,\n                    success: response.ok,\n                    message: response.ok ? \"SMS sent successfully\" : \"SMS send failed\"\n                };\n            }\n            if (!response.ok) {\n                console.error(\"❌ SMS API error:\", response.status, responseText);\n                throw new Error(`SMS API returned ${response.status}: ${responseText}`);\n            }\n            return {\n                success: true,\n                messageId: result.messageId || result.id || `sms_${Date.now()}`,\n                status: result.status || \"sent\",\n                message: result.message || \"SMS sent successfully\",\n                rawResponse: result\n            };\n        } catch (error) {\n            console.error(\"❌ SMS Error:\", error);\n            throw new Error(`Failed to send SMS: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    async sendVerificationCode(phone, code) {\n        const message = `Your CrumbledCookies verification code is: ${code}. Valid for 10 minutes. Do not share this code with anyone.`;\n        return this.sendSMS(phone, message);\n    }\n    formatPhoneNumber(phone) {\n        // Remove all non-digit characters except +\n        let cleaned = phone.replace(/[^\\d+]/g, \"\");\n        console.log(`📞 Original phone: \"${phone}\" -> Cleaned: \"${cleaned}\"`);\n        // Handle different Egyptian phone number formats\n        if (cleaned.startsWith(\"+20\")) {\n            cleaned = cleaned.substring(3);\n            console.log(\"\\uD83C\\uDDEA\\uD83C\\uDDEC Removed +20 prefix:\", cleaned);\n        } else if (cleaned.startsWith(\"20\")) {\n            cleaned = cleaned.substring(2);\n            console.log(\"\\uD83C\\uDDEA\\uD83C\\uDDEC Removed 20 prefix:\", cleaned);\n        }\n        // Ensure it starts with 0 for Egyptian format\n        if (!cleaned.startsWith(\"0\")) {\n            cleaned = \"0\" + cleaned;\n            console.log(\"\\uD83D\\uDD22 Added leading 0:\", cleaned);\n        }\n        // Validate Egyptian mobile number format (11 digits starting with 01)\n        if (cleaned.length === 11 && cleaned.startsWith(\"01\")) {\n            console.log(\"✅ Valid Egyptian mobile format:\", cleaned);\n            return cleaned;\n        }\n        // If it's 10 digits starting with 1, add the 0\n        if (cleaned.length === 10 && cleaned.startsWith(\"1\")) {\n            const formatted = \"0\" + cleaned;\n            console.log(\"✅ Added 0 to 10-digit number:\", formatted);\n            return formatted;\n        }\n        console.log(\"⚠️ Using phone as-is (might not be standard Egyptian format):\", cleaned);\n        return cleaned;\n    }\n    // Test method to verify SMS service is working\n    async testConnection() {\n        try {\n            console.log(\"\\uD83E\\uDDEA Testing SMS service connection...\");\n            const controller = new AbortController();\n            const timeoutId = setTimeout(()=>controller.abort(), 10000) // 10 second timeout\n            ;\n            const testResponse = await fetch(`${this.config.baseUrl}/sendSMS`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    senderName: this.config.senderName,\n                    recipients: \"01234567890\",\n                    messageText: \"Connection test\"\n                }),\n                signal: controller.signal\n            });\n            clearTimeout(timeoutId);\n            const responseText = await testResponse.text();\n            console.log(`🧪 Test response: ${testResponse.status} - ${responseText}`);\n            return {\n                success: testResponse.status < 500,\n                message: testResponse.status < 500 ? \"SMS service is reachable\" : \"SMS service error\",\n                details: {\n                    status: testResponse.status,\n                    response: responseText,\n                    url: `${this.config.baseUrl}/sendSMS`\n                }\n            };\n        } catch (error) {\n            console.error(\"\\uD83E\\uDDEA SMS service connection test failed:\", error);\n            return {\n                success: false,\n                message: \"SMS service is not reachable\",\n                details: {\n                    error: error instanceof Error ? error.message : \"Unknown error\",\n                    url: `${this.config.baseUrl}/sendSMS`\n                }\n            };\n        }\n    }\n}\n// Create a singleton instance\nconst smsService = new CustomSMSService();\nasync function sendVerificationCode(phoneNumber, existingOtp) {\n    try {\n        // Format phone number\n        const formattedPhone = phoneNumber.replace(/\\D/g, \"\");\n        console.log(\"\\uD83D\\uDCF1 [SMS Service] Original phone:\", phoneNumber);\n        console.log(\"\\uD83D\\uDCF1 [SMS Service] Formatted phone:\", formattedPhone);\n        // Use existing OTP or generate a new one\n        const code = existingOtp || Math.floor(100000 + Math.random() * 900000).toString();\n        console.log(\"\\uD83D\\uDD11 [SMS Service] OTP code:\", code);\n        // Always send the SMS\n        await smsService.sendVerificationCode(formattedPhone, code);\n        // Store the verification code in MySQL (always store, whether existing or new)\n        console.log(\"⏰ [SMS Service] Storing OTP with 10-minute expiration\");\n        console.log(\"\\uD83D\\uDCBE [SMS Service] Inserting into database:\", {\n            phone: formattedPhone,\n            code\n        });\n        const result = await _services_databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(\"INSERT INTO phone_verification (phone, verification_code, expires_at) VALUES (?, ?, NOW() + INTERVAL 10 MINUTE)\", [\n            formattedPhone,\n            code\n        ]);\n        console.log(\"✅ [SMS Service] Database insert result:\", result);\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"❌ [SMS Service] Error sending verification code:\", error);\n        throw error;\n    }\n}\nasync function verifyCode(phoneNumber, code) {\n    try {\n        const formattedPhone = phoneNumber.replace(/\\D/g, \"\");\n        // Check if code exists and is valid\n        const [result] = await _services_databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(`SELECT \n        id,\n        verification_code,\n        expires_at,\n        is_verified\n      FROM phone_verification\n      WHERE phone = ?\n        AND verification_code = ?\n        AND expires_at > NOW()\n        AND is_verified = false\n      ORDER BY created_at DESC\n      LIMIT 1`, [\n            formattedPhone,\n            code\n        ]);\n        if (!Array.isArray(result) || result.length === 0) {\n            return {\n                success: false,\n                error: \"Invalid or expired verification code\"\n            };\n        }\n        // Mark as verified\n        await _services_databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(\"UPDATE phone_verification SET is_verified = true WHERE id = ?\", [\n            result[0].id\n        ]);\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"Error verifying code:\", error);\n        throw error;\n    }\n}\nconst CEQUENS_API_URL = \"https://apis.cequens.com/sms/v1/messages\";\nconst CEQUENS_AUTH_TOKEN = process.env.CEQUENS_AUTH_TOKEN;\nconst SENDER_NAME = process.env.SMS_SENDER_NAME || \"Manex\";\n// Rate limiting configuration\nconst RATE_LIMIT = {\n    maxRequests: 100,\n    windowMs: 60 * 60 * 1000,\n    retryAfter: 60 * 1000 // 1 minute between retries\n};\nasync function isRateLimited(phone) {\n    const now = new Date();\n    const resetTime = new Date(now.getTime() + RATE_LIMIT.windowMs);\n    try {\n        // Clean up expired records\n        await _services_databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(\"DELETE FROM sms_rate_limits WHERE reset_time < NOW()\");\n        // Get or create rate limit record\n        const result = await _services_databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(\"INSERT INTO sms_rate_limits (phone, request_count, reset_time) VALUES (?, 1, ?) ON DUPLICATE KEY UPDATE request_count = CASE WHEN sms_rate_limits.reset_time < NOW() THEN 1 ELSE sms_rate_limits.request_count + 1 END, reset_time = CASE WHEN sms_rate_limits.reset_time < NOW() THEN ? ELSE sms_rate_limits.reset_time END RETURNING *\", [\n            phone,\n            resetTime,\n            resetTime\n        ]);\n        const record = result.rows[0];\n        return record.request_count > RATE_LIMIT.maxRequests;\n    } catch (error) {\n        console.error(\"Rate limit check error:\", error);\n        // If there's an error checking rate limit, allow the request\n        return false;\n    }\n}\nasync function wait(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n// Retry strategy configuration\nconst RETRY_STRATEGY = {\n    maxRetries: 3,\n    initialDelay: 1000,\n    maxDelay: 10000,\n    backoffFactor: 2,\n    jitter: 0.1\n};\nfunction calculateRetryDelay(attempt) {\n    const delay = Math.min(RETRY_STRATEGY.initialDelay * Math.pow(RETRY_STRATEGY.backoffFactor, attempt - 1), RETRY_STRATEGY.maxDelay);\n    // Add jitter to prevent thundering herd\n    const jitter = delay * RETRY_STRATEGY.jitter;\n    return delay + (Math.random() * 2 - 1) * jitter;\n}\nasync function sendSMSWithRetry(phone, message) {\n    if (!CEQUENS_AUTH_TOKEN) {\n        throw new Error(\"CEQUENS_AUTH_TOKEN is not configured\");\n    }\n    if (await isRateLimited(phone)) {\n        return {\n            success: false,\n            message: \"Rate limit exceeded. Please try again later.\"\n        };\n    }\n    let lastError = null;\n    let lastResponse = null;\n    for(let attempt = 1; attempt <= RETRY_STRATEGY.maxRetries; attempt++){\n        try {\n            const response = await fetch(CEQUENS_API_URL, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${CEQUENS_AUTH_TOKEN}`\n                },\n                body: JSON.stringify({\n                    senderName: SENDER_NAME,\n                    messageType: \"text\",\n                    shortURL: false,\n                    recipients: phone,\n                    messageText: message\n                })\n            });\n            const data = await response.json();\n            lastResponse = data;\n            if (!response.ok) {\n                // Don't retry on certain error types\n                if (response.status === 400 || response.status === 401 || response.status === 403) {\n                    throw new Error(data.message || \"Invalid request or authentication error\");\n                }\n                throw new Error(data.message || \"Failed to send SMS\");\n            }\n            // Log successful SMS\n            await _services_databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(\"INSERT INTO sms_logs (phone, message, status, response_data) VALUES (?, ?, ?, ?)\", [\n                phone,\n                message,\n                \"success\",\n                JSON.stringify(data)\n            ]);\n            return {\n                success: true,\n                message: \"SMS sent successfully\",\n                data\n            };\n        } catch (error) {\n            lastError = error instanceof Error ? error : new Error(\"Unknown error\");\n            console.error(`SMS sending attempt ${attempt} failed:`, error);\n            // Log failed attempt\n            await _services_databaseService__WEBPACK_IMPORTED_MODULE_0__.databaseService.query(\"INSERT INTO sms_logs (phone, message, status, error_message, response_data) VALUES (?, ?, ?, ?, ?)\", [\n                phone,\n                message,\n                \"failed\",\n                lastError.message,\n                JSON.stringify(lastResponse)\n            ]);\n            if (attempt < RETRY_STRATEGY.maxRetries) {\n                const delay = calculateRetryDelay(attempt);\n                await wait(delay);\n            }\n        }\n    }\n    return {\n        success: false,\n        message: lastError?.message || \"Failed to send SMS after multiple attempts\",\n        data: lastResponse\n    };\n}\nasync function sendOTP(phone, otp) {\n    const message = `Your verification code is: ${otp}. This code will expire in 5 minutes.`;\n    return sendSMSWithRetry(phone, message);\n}\nasync function sendOrderStatusUpdate(phone, orderId, status) {\n    const message = `Your order #${orderId} status has been updated to: ${status}. Track your order at ${process.env.NEXT_PUBLIC_APP_URL}/orders/${orderId}`;\n    return sendSMSWithRetry(phone, message);\n}\nasync function sendOrderConfirmation(phone, orderId) {\n    const message = `Thank you for your order! Your order #${orderId} has been confirmed. Track your order at ${process.env.NEXT_PUBLIC_APP_URL}/orders/${orderId}`;\n    return sendSMSWithRetry(phone, message);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/sms-service.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mysql2","vendor-chunks/aws-ssl-profiles","vendor-chunks/iconv-lite","vendor-chunks/long","vendor-chunks/named-placeholders","vendor-chunks/denque","vendor-chunks/is-property","vendor-chunks/lru.min","vendor-chunks/sqlstring","vendor-chunks/seq-queue","vendor-chunks/generate-function","vendor-chunks/safer-buffer"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fauth%2Fotp%2Froute&page=%2Fapi%2Fauth%2Fotp%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fauth%2Fotp%2Froute.ts&appDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CASUS%5CAngularWebApp%5Ccrumbled-website&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();