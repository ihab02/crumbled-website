"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_lib_middleware_auth_ts";
exports.ids = ["_rsc_lib_middleware_auth_ts"];
exports.modules = {

/***/ "(rsc)/./lib/auth-config.ts":
/*!****************************!*\
  !*** ./lib/auth-config.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authConfig: () => (/* binding */ authConfig),\n/* harmony export */   getJwtSecret: () => (/* binding */ getJwtSecret),\n/* harmony export */   validateAuthConfig: () => (/* binding */ validateAuthConfig),\n/* harmony export */   validatePassword: () => (/* binding */ validatePassword)\n/* harmony export */ });\n// Authentication configuration with separate secrets for customer and admin\nconst authConfig = {\n    // JWT Secrets - MUST be set in environment variables\n    customerJwtSecret: process.env.CUSTOMER_JWT_SECRET,\n    adminJwtSecret: process.env.ADMIN_JWT_SECRET,\n    // Fallback secrets (for development only)\n    fallbackCustomerSecret: \"customer-dev-secret-change-in-production\",\n    fallbackAdminSecret: \"admin-dev-secret-change-in-production\",\n    // Token expiration times (in seconds)\n    customerTokenExpiry: 24 * 60 * 60,\n    adminTokenExpiry: 7 * 24 * 60 * 60,\n    refreshTokenExpiry: 30 * 24 * 60 * 60,\n    // Rate limiting\n    maxLoginAttempts: 5,\n    lockoutDuration: 15 * 60,\n    // Password requirements\n    minPasswordLength: 8,\n    requireUppercase: true,\n    requireLowercase: true,\n    requireNumbers: true,\n    requireSpecialChars: false,\n    // Session management\n    sessionTimeout: 30 * 60,\n    maxConcurrentSessions: 3,\n    // Cookie settings\n    cookieSettings: {\n        httpOnly: true,\n        secure: \"development\" === \"production\",\n        sameSite: \"strict\",\n        path: \"/\"\n    }\n};\n// Validate environment variables\nfunction validateAuthConfig() {\n    const errors = [];\n    if (!authConfig.customerJwtSecret && \"development\" === \"production\") {}\n    if (!authConfig.adminJwtSecret && \"development\" === \"production\") {}\n    if (errors.length > 0) {\n        throw new Error(`Authentication configuration errors:\\n${errors.join(\"\\n\")}`);\n    }\n}\n// Get JWT secret based on user type\nfunction getJwtSecret(userType) {\n    if (userType === \"customer\") {\n        return authConfig.customerJwtSecret || authConfig.fallbackCustomerSecret;\n    } else {\n        return authConfig.adminJwtSecret || authConfig.fallbackAdminSecret;\n    }\n}\n// Password validation\nfunction validatePassword(password) {\n    const errors = [];\n    if (password.length < authConfig.minPasswordLength) {\n        errors.push(`Password must be at least ${authConfig.minPasswordLength} characters long`);\n    }\n    if (authConfig.requireUppercase && !/[A-Z]/.test(password)) {\n        errors.push(\"Password must contain at least one uppercase letter\");\n    }\n    if (authConfig.requireLowercase && !/[a-z]/.test(password)) {\n        errors.push(\"Password must contain at least one lowercase letter\");\n    }\n    if (authConfig.requireNumbers && !/\\d/.test(password)) {\n        errors.push(\"Password must contain at least one number\");\n    }\n    if (authConfig.requireSpecialChars && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n        errors.push(\"Password must contain at least one special character\");\n    }\n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvYXV0aC1jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLDRFQUE0RTtBQUNyRSxNQUFNQSxhQUFhO0lBQ3hCLHFEQUFxRDtJQUNyREMsbUJBQW1CQyxRQUFRQyxHQUFHLENBQUNDLG1CQUFtQjtJQUNsREMsZ0JBQWdCSCxRQUFRQyxHQUFHLENBQUNHLGdCQUFnQjtJQUU1QywwQ0FBMEM7SUFDMUNDLHdCQUF3QjtJQUN4QkMscUJBQXFCO0lBRXJCLHNDQUFzQztJQUN0Q0MscUJBQXFCLEtBQUssS0FBSztJQUMvQkMsa0JBQWtCLElBQUksS0FBSyxLQUFLO0lBQ2hDQyxvQkFBb0IsS0FBSyxLQUFLLEtBQUs7SUFFbkMsZ0JBQWdCO0lBQ2hCQyxrQkFBa0I7SUFDbEJDLGlCQUFpQixLQUFLO0lBRXRCLHdCQUF3QjtJQUN4QkMsbUJBQW1CO0lBQ25CQyxrQkFBa0I7SUFDbEJDLGtCQUFrQjtJQUNsQkMsZ0JBQWdCO0lBQ2hCQyxxQkFBcUI7SUFFckIscUJBQXFCO0lBQ3JCQyxnQkFBZ0IsS0FBSztJQUNyQkMsdUJBQXVCO0lBRXZCLGtCQUFrQjtJQUNsQkMsZ0JBQWdCO1FBQ2RDLFVBQVU7UUFDVkMsUUFBUXJCLGtCQUF5QjtRQUNqQ3NCLFVBQVU7UUFDVkMsTUFBTTtJQUNSO0FBQ0YsRUFBRTtBQUVGLGlDQUFpQztBQUMxQixTQUFTQztJQUNkLE1BQU1DLFNBQW1CLEVBQUU7SUFFM0IsSUFBSSxDQUFDM0IsV0FBV0MsaUJBQWlCLElBQUlDLGtCQUF5QixjQUFjLEVBRTNFO0lBRUQsSUFBSSxDQUFDRixXQUFXSyxjQUFjLElBQUlILGtCQUF5QixjQUFjLEVBRXhFO0lBRUQsSUFBSXlCLE9BQU9FLE1BQU0sR0FBRyxHQUFHO1FBQ3JCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLHNDQUFzQyxFQUFFSCxPQUFPSSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzlFO0FBQ0Y7QUFFQSxvQ0FBb0M7QUFDN0IsU0FBU0MsYUFBYUMsUUFBOEI7SUFDekQsSUFBSUEsYUFBYSxZQUFZO1FBQzNCLE9BQU9qQyxXQUFXQyxpQkFBaUIsSUFBSUQsV0FBV08sc0JBQXNCO0lBQzFFLE9BQU87UUFDTCxPQUFPUCxXQUFXSyxjQUFjLElBQUlMLFdBQVdRLG1CQUFtQjtJQUNwRTtBQUNGO0FBRUEsc0JBQXNCO0FBQ2YsU0FBUzBCLGlCQUFpQkMsUUFBZ0I7SUFDL0MsTUFBTVIsU0FBbUIsRUFBRTtJQUUzQixJQUFJUSxTQUFTTixNQUFNLEdBQUc3QixXQUFXYyxpQkFBaUIsRUFBRTtRQUNsRGEsT0FBT0MsSUFBSSxDQUFDLENBQUMsMEJBQTBCLEVBQUU1QixXQUFXYyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN6RjtJQUVBLElBQUlkLFdBQVdlLGdCQUFnQixJQUFJLENBQUMsUUFBUXFCLElBQUksQ0FBQ0QsV0FBVztRQUMxRFIsT0FBT0MsSUFBSSxDQUFDO0lBQ2Q7SUFFQSxJQUFJNUIsV0FBV2dCLGdCQUFnQixJQUFJLENBQUMsUUFBUW9CLElBQUksQ0FBQ0QsV0FBVztRQUMxRFIsT0FBT0MsSUFBSSxDQUFDO0lBQ2Q7SUFFQSxJQUFJNUIsV0FBV2lCLGNBQWMsSUFBSSxDQUFDLEtBQUttQixJQUFJLENBQUNELFdBQVc7UUFDckRSLE9BQU9DLElBQUksQ0FBQztJQUNkO0lBRUEsSUFBSTVCLFdBQVdrQixtQkFBbUIsSUFBSSxDQUFDLHlCQUF5QmtCLElBQUksQ0FBQ0QsV0FBVztRQUM5RVIsT0FBT0MsSUFBSSxDQUFDO0lBQ2Q7SUFFQSxPQUFPO1FBQ0xTLFNBQVNWLE9BQU9FLE1BQU0sS0FBSztRQUMzQkY7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY3J1bWJsZWQtd2Vic2l0ZS8uL2xpYi9hdXRoLWNvbmZpZy50cz9lZmUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEF1dGhlbnRpY2F0aW9uIGNvbmZpZ3VyYXRpb24gd2l0aCBzZXBhcmF0ZSBzZWNyZXRzIGZvciBjdXN0b21lciBhbmQgYWRtaW5cclxuZXhwb3J0IGNvbnN0IGF1dGhDb25maWcgPSB7XHJcbiAgLy8gSldUIFNlY3JldHMgLSBNVVNUIGJlIHNldCBpbiBlbnZpcm9ubWVudCB2YXJpYWJsZXNcclxuICBjdXN0b21lckp3dFNlY3JldDogcHJvY2Vzcy5lbnYuQ1VTVE9NRVJfSldUX1NFQ1JFVCxcclxuICBhZG1pbkp3dFNlY3JldDogcHJvY2Vzcy5lbnYuQURNSU5fSldUX1NFQ1JFVCxcclxuICBcclxuICAvLyBGYWxsYmFjayBzZWNyZXRzIChmb3IgZGV2ZWxvcG1lbnQgb25seSlcclxuICBmYWxsYmFja0N1c3RvbWVyU2VjcmV0OiAnY3VzdG9tZXItZGV2LXNlY3JldC1jaGFuZ2UtaW4tcHJvZHVjdGlvbicsXHJcbiAgZmFsbGJhY2tBZG1pblNlY3JldDogJ2FkbWluLWRldi1zZWNyZXQtY2hhbmdlLWluLXByb2R1Y3Rpb24nLFxyXG4gIFxyXG4gIC8vIFRva2VuIGV4cGlyYXRpb24gdGltZXMgKGluIHNlY29uZHMpXHJcbiAgY3VzdG9tZXJUb2tlbkV4cGlyeTogMjQgKiA2MCAqIDYwLCAvLyAyNCBob3Vyc1xyXG4gIGFkbWluVG9rZW5FeHBpcnk6IDcgKiAyNCAqIDYwICogNjAsIC8vIDcgZGF5c1xyXG4gIHJlZnJlc2hUb2tlbkV4cGlyeTogMzAgKiAyNCAqIDYwICogNjAsIC8vIDMwIGRheXNcclxuICBcclxuICAvLyBSYXRlIGxpbWl0aW5nXHJcbiAgbWF4TG9naW5BdHRlbXB0czogNSxcclxuICBsb2Nrb3V0RHVyYXRpb246IDE1ICogNjAsIC8vIDE1IG1pbnV0ZXNcclxuICBcclxuICAvLyBQYXNzd29yZCByZXF1aXJlbWVudHNcclxuICBtaW5QYXNzd29yZExlbmd0aDogOCxcclxuICByZXF1aXJlVXBwZXJjYXNlOiB0cnVlLFxyXG4gIHJlcXVpcmVMb3dlcmNhc2U6IHRydWUsXHJcbiAgcmVxdWlyZU51bWJlcnM6IHRydWUsXHJcbiAgcmVxdWlyZVNwZWNpYWxDaGFyczogZmFsc2UsXHJcbiAgXHJcbiAgLy8gU2Vzc2lvbiBtYW5hZ2VtZW50XHJcbiAgc2Vzc2lvblRpbWVvdXQ6IDMwICogNjAsIC8vIDMwIG1pbnV0ZXNcclxuICBtYXhDb25jdXJyZW50U2Vzc2lvbnM6IDMsXHJcbiAgXHJcbiAgLy8gQ29va2llIHNldHRpbmdzXHJcbiAgY29va2llU2V0dGluZ3M6IHtcclxuICAgIGh0dHBPbmx5OiB0cnVlLFxyXG4gICAgc2VjdXJlOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nLFxyXG4gICAgc2FtZVNpdGU6ICdzdHJpY3QnIGFzIGNvbnN0LFxyXG4gICAgcGF0aDogJy8nLFxyXG4gIH1cclxufTtcclxuXHJcbi8vIFZhbGlkYXRlIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBdXRoQ29uZmlnKCkge1xyXG4gIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcclxuICBcclxuICBpZiAoIWF1dGhDb25maWcuY3VzdG9tZXJKd3RTZWNyZXQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgZXJyb3JzLnB1c2goJ0NVU1RPTUVSX0pXVF9TRUNSRVQgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgcmVxdWlyZWQgaW4gcHJvZHVjdGlvbicpO1xyXG4gIH1cclxuICBcclxuICBpZiAoIWF1dGhDb25maWcuYWRtaW5Kd3RTZWNyZXQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgZXJyb3JzLnB1c2goJ0FETUlOX0pXVF9TRUNSRVQgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgcmVxdWlyZWQgaW4gcHJvZHVjdGlvbicpO1xyXG4gIH1cclxuICBcclxuICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihgQXV0aGVudGljYXRpb24gY29uZmlndXJhdGlvbiBlcnJvcnM6XFxuJHtlcnJvcnMuam9pbignXFxuJyl9YCk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBHZXQgSldUIHNlY3JldCBiYXNlZCBvbiB1c2VyIHR5cGVcclxuZXhwb3J0IGZ1bmN0aW9uIGdldEp3dFNlY3JldCh1c2VyVHlwZTogJ2N1c3RvbWVyJyB8ICdhZG1pbicpOiBzdHJpbmcge1xyXG4gIGlmICh1c2VyVHlwZSA9PT0gJ2N1c3RvbWVyJykge1xyXG4gICAgcmV0dXJuIGF1dGhDb25maWcuY3VzdG9tZXJKd3RTZWNyZXQgfHwgYXV0aENvbmZpZy5mYWxsYmFja0N1c3RvbWVyU2VjcmV0O1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gYXV0aENvbmZpZy5hZG1pbkp3dFNlY3JldCB8fCBhdXRoQ29uZmlnLmZhbGxiYWNrQWRtaW5TZWNyZXQ7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBQYXNzd29yZCB2YWxpZGF0aW9uXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcpOiB7IGlzVmFsaWQ6IGJvb2xlYW47IGVycm9yczogc3RyaW5nW10gfSB7XHJcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG4gIFxyXG4gIGlmIChwYXNzd29yZC5sZW5ndGggPCBhdXRoQ29uZmlnLm1pblBhc3N3b3JkTGVuZ3RoKSB7XHJcbiAgICBlcnJvcnMucHVzaChgUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCAke2F1dGhDb25maWcubWluUGFzc3dvcmRMZW5ndGh9IGNoYXJhY3RlcnMgbG9uZ2ApO1xyXG4gIH1cclxuICBcclxuICBpZiAoYXV0aENvbmZpZy5yZXF1aXJlVXBwZXJjYXNlICYmICEvW0EtWl0vLnRlc3QocGFzc3dvcmQpKSB7XHJcbiAgICBlcnJvcnMucHVzaCgnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyJyk7XHJcbiAgfVxyXG4gIFxyXG4gIGlmIChhdXRoQ29uZmlnLnJlcXVpcmVMb3dlcmNhc2UgJiYgIS9bYS16XS8udGVzdChwYXNzd29yZCkpIHtcclxuICAgIGVycm9ycy5wdXNoKCdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXInKTtcclxuICB9XHJcbiAgXHJcbiAgaWYgKGF1dGhDb25maWcucmVxdWlyZU51bWJlcnMgJiYgIS9cXGQvLnRlc3QocGFzc3dvcmQpKSB7XHJcbiAgICBlcnJvcnMucHVzaCgnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBudW1iZXInKTtcclxuICB9XHJcbiAgXHJcbiAgaWYgKGF1dGhDb25maWcucmVxdWlyZVNwZWNpYWxDaGFycyAmJiAhL1shQCMkJV4mKigpLC4/XCI6e318PD5dLy50ZXN0KHBhc3N3b3JkKSkge1xyXG4gICAgZXJyb3JzLnB1c2goJ1Bhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgc3BlY2lhbCBjaGFyYWN0ZXInKTtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHtcclxuICAgIGlzVmFsaWQ6IGVycm9ycy5sZW5ndGggPT09IDAsXHJcbiAgICBlcnJvcnNcclxuICB9O1xyXG59ICJdLCJuYW1lcyI6WyJhdXRoQ29uZmlnIiwiY3VzdG9tZXJKd3RTZWNyZXQiLCJwcm9jZXNzIiwiZW52IiwiQ1VTVE9NRVJfSldUX1NFQ1JFVCIsImFkbWluSnd0U2VjcmV0IiwiQURNSU5fSldUX1NFQ1JFVCIsImZhbGxiYWNrQ3VzdG9tZXJTZWNyZXQiLCJmYWxsYmFja0FkbWluU2VjcmV0IiwiY3VzdG9tZXJUb2tlbkV4cGlyeSIsImFkbWluVG9rZW5FeHBpcnkiLCJyZWZyZXNoVG9rZW5FeHBpcnkiLCJtYXhMb2dpbkF0dGVtcHRzIiwibG9ja291dER1cmF0aW9uIiwibWluUGFzc3dvcmRMZW5ndGgiLCJyZXF1aXJlVXBwZXJjYXNlIiwicmVxdWlyZUxvd2VyY2FzZSIsInJlcXVpcmVOdW1iZXJzIiwicmVxdWlyZVNwZWNpYWxDaGFycyIsInNlc3Npb25UaW1lb3V0IiwibWF4Q29uY3VycmVudFNlc3Npb25zIiwiY29va2llU2V0dGluZ3MiLCJodHRwT25seSIsInNlY3VyZSIsInNhbWVTaXRlIiwicGF0aCIsInZhbGlkYXRlQXV0aENvbmZpZyIsImVycm9ycyIsInB1c2giLCJsZW5ndGgiLCJFcnJvciIsImpvaW4iLCJnZXRKd3RTZWNyZXQiLCJ1c2VyVHlwZSIsInZhbGlkYXRlUGFzc3dvcmQiLCJwYXNzd29yZCIsInRlc3QiLCJpc1ZhbGlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/auth-config.ts\n");

/***/ }),

/***/ "(rsc)/./lib/middleware/auth.ts":
/*!********************************!*\
  !*** ./lib/middleware/auth.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminAuth: () => (/* binding */ adminAuth),\n/* harmony export */   customerAuth: () => (/* binding */ customerAuth),\n/* harmony export */   generateRefreshToken: () => (/* binding */ generateRefreshToken),\n/* harmony export */   generateSessionId: () => (/* binding */ generateSessionId),\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   verifyJWT: () => (/* binding */ verifyJWT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_auth_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/auth-config */ \"(rsc)/./lib/auth-config.ts\");\n\n\n\n// Generate JWT token with separate secrets\nfunction generateToken(payload) {\n    const header = {\n        alg: \"HS256\",\n        typ: \"JWT\"\n    };\n    const now = Math.floor(Date.now() / 1000);\n    const expiry = payload.type === \"refresh\" ? now + _lib_auth_config__WEBPACK_IMPORTED_MODULE_2__.authConfig.refreshTokenExpiry : payload.type === \"admin\" ? now + _lib_auth_config__WEBPACK_IMPORTED_MODULE_2__.authConfig.adminTokenExpiry : now + _lib_auth_config__WEBPACK_IMPORTED_MODULE_2__.authConfig.customerTokenExpiry;\n    const finalPayload = {\n        ...payload,\n        iat: now,\n        exp: expiry\n    };\n    const encodedHeader = Buffer.from(JSON.stringify(header)).toString(\"base64url\");\n    const encodedPayload = Buffer.from(JSON.stringify(finalPayload)).toString(\"base64url\");\n    const secret = (0,_lib_auth_config__WEBPACK_IMPORTED_MODULE_2__.getJwtSecret)(payload.type === \"admin\" ? \"admin\" : \"customer\");\n    const signature = (0,crypto__WEBPACK_IMPORTED_MODULE_1__.createHmac)(\"sha256\", secret).update(`${encodedHeader}.${encodedPayload}`).digest(\"base64url\");\n    return `${encodedHeader}.${encodedPayload}.${signature}`;\n}\n// Generate refresh token\nfunction generateRefreshToken(userId, userType, sessionId) {\n    return generateToken({\n        type: \"refresh\",\n        userId,\n        userType,\n        sessionId\n    });\n}\n// Verify JWT token\nfunction verifyJWT(token, expectedType) {\n    const [encodedHeader, encodedPayload, signature] = token.split(\".\");\n    if (!encodedHeader || !encodedPayload || !signature) {\n        throw new Error(\"Invalid token format\");\n    }\n    const payload = JSON.parse(Buffer.from(encodedPayload, \"base64url\").toString());\n    // Determine secret based on payload type\n    const secret = (0,_lib_auth_config__WEBPACK_IMPORTED_MODULE_2__.getJwtSecret)(payload.type === \"admin\" ? \"admin\" : \"customer\");\n    const expectedSignature = (0,crypto__WEBPACK_IMPORTED_MODULE_1__.createHmac)(\"sha256\", secret).update(`${encodedHeader}.${encodedPayload}`).digest(\"base64url\");\n    if (signature !== expectedSignature) {\n        throw new Error(\"Invalid token signature\");\n    }\n    if (payload.exp < Math.floor(Date.now() / 1000)) {\n        throw new Error(\"Token has expired\");\n    }\n    // Verify expected type if provided\n    if (expectedType && payload.type !== expectedType) {\n        throw new Error(`Expected token type ${expectedType}, got ${payload.type}`);\n    }\n    return payload;\n}\n// Generate session ID\nfunction generateSessionId() {\n    return (0,crypto__WEBPACK_IMPORTED_MODULE_1__.randomBytes)(32).toString(\"hex\");\n}\n// Middleware for admin-only routes\nasync function adminAuth(req) {\n    try {\n        const authHeader = req.headers.get(\"Authorization\");\n        if (!authHeader?.startsWith(\"Bearer \")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing or invalid authorization header\"\n            }, {\n                status: 401\n            });\n        }\n        const token = authHeader.split(\" \")[1];\n        const payload = verifyJWT(token, \"admin\");\n        // Add the admin info to the request for use in the route handler\n        req.headers.set(\"x-admin-username\", payload.username);\n        req.headers.set(\"x-admin-email\", payload.email);\n        req.headers.set(\"x-session-id\", payload.sessionId);\n        return null; // Continue to the route handler\n    } catch (error) {\n        console.error(\"Admin auth error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Invalid or expired token\"\n        }, {\n            status: 401\n        });\n    }\n}\n// Middleware for customer-only routes\nasync function customerAuth(req) {\n    try {\n        const authHeader = req.headers.get(\"Authorization\");\n        if (!authHeader?.startsWith(\"Bearer \")) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Missing or invalid authorization header\"\n            }, {\n                status: 401\n            });\n        }\n        const token = authHeader.split(\" \")[1];\n        const payload = verifyJWT(token, \"customer\");\n        // Add the customer info to the request for use in the route handler\n        req.headers.set(\"x-customer-id\", payload.id.toString());\n        req.headers.set(\"x-customer-email\", payload.email);\n        req.headers.set(\"x-session-id\", payload.sessionId);\n        return null; // Continue to the route handler\n    } catch (error) {\n        console.error(\"Customer auth error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : \"Invalid or expired token\"\n        }, {\n            status: 401\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPO1FBRWpDLG9FQUFvRTtRQUNwRVEsSUFBSUUsT0FBTyxDQUFDTSxHQUFHLENBQUMsaUJBQWlCaEQsUUFBUXNELEVBQUUsQ0FBQ2pDLFFBQVE7UUFDcERtQixJQUFJRSxPQUFPLENBQUNNLEdBQUcsQ0FBQyxvQkFBb0JoRCxRQUFRa0QsS0FBSztRQUNqRFYsSUFBSUUsT0FBTyxDQUFDTSxHQUFHLENBQUMsZ0JBQWdCaEQsUUFBUThCLFNBQVM7UUFFakQsT0FBTyxNQUFNLGdDQUFnQztJQUMvQyxFQUFFLE9BQU9nQixPQUFPO1FBQ2RLLFFBQVFMLEtBQUssQ0FBQyx3QkFBd0JBO1FBQ3RDLE9BQU9wRCxxREFBWUEsQ0FBQ21ELElBQUksQ0FDdEI7WUFBRUMsT0FBT0EsaUJBQWlCWCxRQUFRVyxNQUFNTSxPQUFPLEdBQUc7UUFBMkIsR0FDN0U7WUFBRUwsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcnVtYmxlZC13ZWJzaXRlLy4vbGliL21pZGRsZXdhcmUvYXV0aC50cz8yODNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBjcmVhdGVIbWFjLCByYW5kb21CeXRlcyB9IGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyBnZXRKd3RTZWNyZXQsIGF1dGhDb25maWcgfSBmcm9tICdAL2xpYi9hdXRoLWNvbmZpZyc7XG5cbi8vIFR5cGVzIGZvciBKV1QgcGF5bG9hZFxuaW50ZXJmYWNlIEFkbWluUGF5bG9hZCB7XG4gIHR5cGU6ICdhZG1pbic7XG4gIGlkOiBudW1iZXI7XG4gIHVzZXJuYW1lOiBzdHJpbmc7XG4gIGVtYWlsPzogc3RyaW5nO1xuICBzZXNzaW9uSWQ/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDdXN0b21lclBheWxvYWQge1xuICB0eXBlOiAnY3VzdG9tZXInO1xuICBpZDogbnVtYmVyO1xuICBlbWFpbDogc3RyaW5nO1xuICBzZXNzaW9uSWQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFJlZnJlc2hQYXlsb2FkIHtcbiAgdHlwZTogJ3JlZnJlc2gnO1xuICB1c2VySWQ6IHN0cmluZztcbiAgdXNlclR5cGU6ICdjdXN0b21lcicgfCAnYWRtaW4nO1xuICBzZXNzaW9uSWQ6IHN0cmluZztcbn1cblxudHlwZSBKV1RQYXlsb2FkID0gQWRtaW5QYXlsb2FkIHwgQ3VzdG9tZXJQYXlsb2FkIHwgUmVmcmVzaFBheWxvYWQ7XG5cbi8vIEdlbmVyYXRlIEpXVCB0b2tlbiB3aXRoIHNlcGFyYXRlIHNlY3JldHNcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVRva2VuKHBheWxvYWQ6IEpXVFBheWxvYWQpOiBzdHJpbmcge1xuICBjb25zdCBoZWFkZXIgPSB7XG4gICAgYWxnOiAnSFMyNTYnLFxuICAgIHR5cDogJ0pXVCdcbiAgfTtcblxuICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgY29uc3QgZXhwaXJ5ID0gcGF5bG9hZC50eXBlID09PSAncmVmcmVzaCcgXG4gICAgPyBub3cgKyBhdXRoQ29uZmlnLnJlZnJlc2hUb2tlbkV4cGlyeVxuICAgIDogcGF5bG9hZC50eXBlID09PSAnYWRtaW4nIFxuICAgICAgPyBub3cgKyBhdXRoQ29uZmlnLmFkbWluVG9rZW5FeHBpcnkgXG4gICAgICA6IG5vdyArIGF1dGhDb25maWcuY3VzdG9tZXJUb2tlbkV4cGlyeTtcblxuICBjb25zdCBmaW5hbFBheWxvYWQgPSB7XG4gICAgLi4ucGF5bG9hZCxcbiAgICBpYXQ6IG5vdyxcbiAgICBleHA6IGV4cGlyeVxuICB9O1xuXG4gIGNvbnN0IGVuY29kZWRIZWFkZXIgPSBCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShoZWFkZXIpKS50b1N0cmluZygnYmFzZTY0dXJsJyk7XG4gIGNvbnN0IGVuY29kZWRQYXlsb2FkID0gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoZmluYWxQYXlsb2FkKSkudG9TdHJpbmcoJ2Jhc2U2NHVybCcpO1xuXG4gIGNvbnN0IHNlY3JldCA9IGdldEp3dFNlY3JldChwYXlsb2FkLnR5cGUgPT09ICdhZG1pbicgPyAnYWRtaW4nIDogJ2N1c3RvbWVyJyk7XG4gIGNvbnN0IHNpZ25hdHVyZSA9IGNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldClcbiAgICAudXBkYXRlKGAke2VuY29kZWRIZWFkZXJ9LiR7ZW5jb2RlZFBheWxvYWR9YClcbiAgICAuZGlnZXN0KCdiYXNlNjR1cmwnKTtcblxuICByZXR1cm4gYCR7ZW5jb2RlZEhlYWRlcn0uJHtlbmNvZGVkUGF5bG9hZH0uJHtzaWduYXR1cmV9YDtcbn1cblxuLy8gR2VuZXJhdGUgcmVmcmVzaCB0b2tlblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUmVmcmVzaFRva2VuKHVzZXJJZDogc3RyaW5nLCB1c2VyVHlwZTogJ2N1c3RvbWVyJyB8ICdhZG1pbicsIHNlc3Npb25JZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGdlbmVyYXRlVG9rZW4oe1xuICAgIHR5cGU6ICdyZWZyZXNoJyxcbiAgICB1c2VySWQsXG4gICAgdXNlclR5cGUsXG4gICAgc2Vzc2lvbklkXG4gIH0pO1xufVxuXG4vLyBWZXJpZnkgSldUIHRva2VuXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5SldUKHRva2VuOiBzdHJpbmcsIGV4cGVjdGVkVHlwZT86ICdjdXN0b21lcicgfCAnYWRtaW4nIHwgJ3JlZnJlc2gnKTogSldUUGF5bG9hZCB7XG4gIGNvbnN0IFtlbmNvZGVkSGVhZGVyLCBlbmNvZGVkUGF5bG9hZCwgc2lnbmF0dXJlXSA9IHRva2VuLnNwbGl0KCcuJyk7XG5cbiAgaWYgKCFlbmNvZGVkSGVhZGVyIHx8ICFlbmNvZGVkUGF5bG9hZCB8fCAhc2lnbmF0dXJlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRva2VuIGZvcm1hdCcpO1xuICB9XG5cbiAgY29uc3QgcGF5bG9hZCA9IEpTT04ucGFyc2UoQnVmZmVyLmZyb20oZW5jb2RlZFBheWxvYWQsICdiYXNlNjR1cmwnKS50b1N0cmluZygpKTtcbiAgXG4gIC8vIERldGVybWluZSBzZWNyZXQgYmFzZWQgb24gcGF5bG9hZCB0eXBlXG4gIGNvbnN0IHNlY3JldCA9IGdldEp3dFNlY3JldChwYXlsb2FkLnR5cGUgPT09ICdhZG1pbicgPyAnYWRtaW4nIDogJ2N1c3RvbWVyJyk7XG4gIFxuICBjb25zdCBleHBlY3RlZFNpZ25hdHVyZSA9IGNyZWF0ZUhtYWMoJ3NoYTI1NicsIHNlY3JldClcbiAgICAudXBkYXRlKGAke2VuY29kZWRIZWFkZXJ9LiR7ZW5jb2RlZFBheWxvYWR9YClcbiAgICAuZGlnZXN0KCdiYXNlNjR1cmwnKTtcblxuICBpZiAoc2lnbmF0dXJlICE9PSBleHBlY3RlZFNpZ25hdHVyZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0b2tlbiBzaWduYXR1cmUnKTtcbiAgfVxuXG4gIGlmIChwYXlsb2FkLmV4cCA8IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb2tlbiBoYXMgZXhwaXJlZCcpO1xuICB9XG5cbiAgLy8gVmVyaWZ5IGV4cGVjdGVkIHR5cGUgaWYgcHJvdmlkZWRcbiAgaWYgKGV4cGVjdGVkVHlwZSAmJiBwYXlsb2FkLnR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdG9rZW4gdHlwZSAke2V4cGVjdGVkVHlwZX0sIGdvdCAke3BheWxvYWQudHlwZX1gKTtcbiAgfVxuXG4gIHJldHVybiBwYXlsb2FkO1xufVxuXG4vLyBHZW5lcmF0ZSBzZXNzaW9uIElEXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVTZXNzaW9uSWQoKTogc3RyaW5nIHtcbiAgcmV0dXJuIHJhbmRvbUJ5dGVzKDMyKS50b1N0cmluZygnaGV4Jyk7XG59XG5cbi8vIE1pZGRsZXdhcmUgZm9yIGFkbWluLW9ubHkgcm91dGVzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRtaW5BdXRoKHJlcTogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhdXRoSGVhZGVyID0gcmVxLmhlYWRlcnMuZ2V0KCdBdXRob3JpemF0aW9uJyk7XG4gICAgaWYgKCFhdXRoSGVhZGVyPy5zdGFydHNXaXRoKCdCZWFyZXIgJykpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ01pc3Npbmcgb3IgaW52YWxpZCBhdXRob3JpemF0aW9uIGhlYWRlcicgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHRva2VuID0gYXV0aEhlYWRlci5zcGxpdCgnICcpWzFdO1xuICAgIGNvbnN0IHBheWxvYWQgPSB2ZXJpZnlKV1QodG9rZW4sICdhZG1pbicpIGFzIEFkbWluUGF5bG9hZDtcblxuICAgIC8vIEFkZCB0aGUgYWRtaW4gaW5mbyB0byB0aGUgcmVxdWVzdCBmb3IgdXNlIGluIHRoZSByb3V0ZSBoYW5kbGVyXG4gICAgcmVxLmhlYWRlcnMuc2V0KCd4LWFkbWluLXVzZXJuYW1lJywgcGF5bG9hZC51c2VybmFtZSk7XG4gICAgcmVxLmhlYWRlcnMuc2V0KCd4LWFkbWluLWVtYWlsJywgcGF5bG9hZC5lbWFpbCk7XG4gICAgcmVxLmhlYWRlcnMuc2V0KCd4LXNlc3Npb24taWQnLCBwYXlsb2FkLnNlc3Npb25JZCk7XG5cbiAgICByZXR1cm4gbnVsbDsgLy8gQ29udGludWUgdG8gdGhlIHJvdXRlIGhhbmRsZXJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdBZG1pbiBhdXRoIGVycm9yOicsIGVycm9yKTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdJbnZhbGlkIG9yIGV4cGlyZWQgdG9rZW4nIH0sXG4gICAgICB7IHN0YXR1czogNDAxIH1cbiAgICApO1xuICB9XG59XG5cbi8vIE1pZGRsZXdhcmUgZm9yIGN1c3RvbWVyLW9ubHkgcm91dGVzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3VzdG9tZXJBdXRoKHJlcTogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhdXRoSGVhZGVyID0gcmVxLmhlYWRlcnMuZ2V0KCdBdXRob3JpemF0aW9uJyk7XG4gICAgaWYgKCFhdXRoSGVhZGVyPy5zdGFydHNXaXRoKCdCZWFyZXIgJykpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ01pc3Npbmcgb3IgaW52YWxpZCBhdXRob3JpemF0aW9uIGhlYWRlcicgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMSB9XG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHRva2VuID0gYXV0aEhlYWRlci5zcGxpdCgnICcpWzFdO1xuICAgIGNvbnN0IHBheWxvYWQgPSB2ZXJpZnlKV1QodG9rZW4sICdjdXN0b21lcicpIGFzIEN1c3RvbWVyUGF5bG9hZDtcblxuICAgIC8vIEFkZCB0aGUgY3VzdG9tZXIgaW5mbyB0byB0aGUgcmVxdWVzdCBmb3IgdXNlIGluIHRoZSByb3V0ZSBoYW5kbGVyXG4gICAgcmVxLmhlYWRlcnMuc2V0KCd4LWN1c3RvbWVyLWlkJywgcGF5bG9hZC5pZC50b1N0cmluZygpKTtcbiAgICByZXEuaGVhZGVycy5zZXQoJ3gtY3VzdG9tZXItZW1haWwnLCBwYXlsb2FkLmVtYWlsKTtcbiAgICByZXEuaGVhZGVycy5zZXQoJ3gtc2Vzc2lvbi1pZCcsIHBheWxvYWQuc2Vzc2lvbklkKTtcblxuICAgIHJldHVybiBudWxsOyAvLyBDb250aW51ZSB0byB0aGUgcm91dGUgaGFuZGxlclxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0N1c3RvbWVyIGF1dGggZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgIHsgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ludmFsaWQgb3IgZXhwaXJlZCB0b2tlbicgfSxcbiAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgICk7XG4gIH1cbn0gIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImNyZWF0ZUhtYWMiLCJyYW5kb21CeXRlcyIsImdldEp3dFNlY3JldCIsImF1dGhDb25maWciLCJnZW5lcmF0ZVRva2VuIiwicGF5bG9hZCIsImhlYWRlciIsImFsZyIsInR5cCIsIm5vdyIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJleHBpcnkiLCJ0eXBlIiwicmVmcmVzaFRva2VuRXhwaXJ5IiwiYWRtaW5Ub2tlbkV4cGlyeSIsImN1c3RvbWVyVG9rZW5FeHBpcnkiLCJmaW5hbFBheWxvYWQiLCJpYXQiLCJleHAiLCJlbmNvZGVkSGVhZGVyIiwiQnVmZmVyIiwiZnJvbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b1N0cmluZyIsImVuY29kZWRQYXlsb2FkIiwic2VjcmV0Iiwic2lnbmF0dXJlIiwidXBkYXRlIiwiZGlnZXN0IiwiZ2VuZXJhdGVSZWZyZXNoVG9rZW4iLCJ1c2VySWQiLCJ1c2VyVHlwZSIsInNlc3Npb25JZCIsInZlcmlmeUpXVCIsInRva2VuIiwiZXhwZWN0ZWRUeXBlIiwic3BsaXQiLCJFcnJvciIsInBhcnNlIiwiZXhwZWN0ZWRTaWduYXR1cmUiLCJnZW5lcmF0ZVNlc3Npb25JZCIsImFkbWluQXV0aCIsInJlcSIsImF1dGhIZWFkZXIiLCJoZWFkZXJzIiwiZ2V0Iiwic3RhcnRzV2l0aCIsImpzb24iLCJlcnJvciIsInN0YXR1cyIsInNldCIsInVzZXJuYW1lIiwiZW1haWwiLCJjb25zb2xlIiwibWVzc2FnZSIsImN1c3RvbWVyQXV0aCIsImlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/middleware/auth.ts\n");

/***/ })

};
;