"use client"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { useSession, signIn } from "next-auth/react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import { toast } from "sonner"
import { 
  ArrowLeft, 
  CreditCard, 
  User, 
  MapPin, 
  Package, 
  CheckCircle, 
  Shield, 
  RefreshCw,
  ShoppingBag,
  LogIn,
  Mail,
  Lock
} from "lucide-react"

interface CheckoutData {
  userType: 'registered' | 'guest';
  user?: {
    id: number;
    email: string;
    firstName: string;
    lastName: string;
    phone: string;
    addresses: Array<{
      id: number;
      street_address: string;
      additional_info?: string;
      city_name: string;
      zone_name: string;
      delivery_fee: number;
      is_default: boolean;
    }>;
  };
  cart?: {
    items: Array<{
      id: number;
      name: string;
      basePrice: number;
      quantity: number;
      isPack: boolean;
      packSize: string;
      imageUrl: string;
      count: number;
      flavorDetails: string;
      total: number;
      flavors: Array<{
        id: number;
        name: string;
        quantity: number;
        price: number;
        size: string;
      }>;
    }>;
    total: number;
    itemCount: number;
  };
  cities: Array<{
    id: number;
    name: string;
    is_active: boolean;
    zones: Array<{
      id: number;
      name: string;
      delivery_fee: number;
      is_active: boolean;
    }>;
  }>;
}

interface GuestData {
  name: string;
  email: string;
  phone: string;
  address: string;
  city: string;
  zone: string;
  additionalInfo?: string;
}

export default function NewCheckoutPage() {
  const router = useRouter()
  const { data: session, status } = useSession()
  const [loading, setLoading] = useState(true)
  const [checkoutData, setCheckoutData] = useState<CheckoutData | null>(null)
  const [guestData, setGuestData] = useState<GuestData>({
    name: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    zone: ''
  })
  const [selectedAddressId, setSelectedAddressId] = useState<number | null>(null)
  const [useNewAddress, setUseNewAddress] = useState(false)
  const [newAddress, setNewAddress] = useState({
    street_address: '',
    additional_info: '',
    city_id: 1,
    zone_id: 1
  })
  const [selectedCity, setSelectedCity] = useState<string>('1')
  const [selectedZone, setSelectedZone] = useState<string>('')
  const [deliveryFee, setDeliveryFee] = useState(50)
  const [phoneError, setPhoneError] = useState<string>('')
  const [emailError, setEmailError] = useState<string>('')
  const [otpModalOpen, setOtpModalOpen] = useState(false)
  const [otpCode, setOtpCode] = useState('')
  const [otpVerified, setOtpVerified] = useState(false)
  const [sendingOtp, setSendingOtp] = useState(false)
  const [verifyingOtp, setVerifyingOtp] = useState(false)
  const [otpCountdown, setOtpCountdown] = useState(0)
  const [phoneToVerify, setPhoneToVerify] = useState('')
  const [orderConfirmed, setOrderConfirmed] = useState(false)
  const [orderData, setOrderData] = useState<any>(null)
  const [paymentMethod, setPaymentMethod] = useState<'cod' | 'paymob'>('cod')
  const [processingPayment, setProcessingPayment] = useState(false)
  
  // Login state
  const [showLogin, setShowLogin] = useState(false)
  const [loginEmail, setLoginEmail] = useState('')
  const [loginPassword, setLoginPassword] = useState('')
  const [loggingIn, setLoggingIn] = useState(false)

  useEffect(() => {
    if (status === 'loading') return
    startCheckout()
  }, [status])

  const startCheckout = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/checkout/start', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({})
      })

      if (!response.ok) {
        throw new Error('Failed to start checkout')
      }

      const result = await response.json()
      if (result.success) {
        setCheckoutData(result.data)
        
        if (result.data.userType === 'guest' && result.data.cities.length > 0) {
          const defaultCity = result.data.cities.find((city: any) => city.id === 1)
          if (defaultCity) {
            setSelectedCity('1')
            setSelectedZone('')
          }
        }
      } else {
        toast.error(result.error || 'Failed to start checkout')
      }
    } catch (error) {
      console.error('Error starting checkout:', error)
      toast.error('Failed to start checkout')
    } finally {
      setLoading(false)
    }
  }

  const validateEgyptianPhone = (phone: string) => {
    const phoneRegex = /^(01)[0-2,5]{1}[0-9]{8}$/
    return phoneRegex.test(phone)
  }

  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return emailRegex.test(email)
  }

  const handlePhoneChange = (phone: string) => {
    const numbersOnly = phone.replace(/\D/g, '')
    const limitedPhone = numbersOnly.slice(0, 11)
    
    setGuestData({ ...guestData, phone: limitedPhone })
    setOtpVerified(false)
    
    if (!limitedPhone) {
      setPhoneError('')
      return
    }
    
    if (!validateEgyptianPhone(limitedPhone)) {
      setPhoneError('Please enter a valid Egyptian phone number (e.g., 01234567890)')
    } else {
      setPhoneError('')
    }
  }

  const handleEmailChange = (email: string) => {
    setGuestData({ ...guestData, email })
    setEmailError('')
    
    if (email && !validateEmail(email)) {
      setEmailError('Please enter a valid email address')
    }
  }

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!loginEmail || !loginPassword) {
      toast.error('Please enter both email and password')
      return
    }

    setLoggingIn(true)
    try {
      const result = await signIn('credentials', {
        email: loginEmail,
        password: loginPassword,
        redirect: false,
      })

      if (result?.error) {
        toast.error('Invalid email or password')
      } else {
        toast.success('Login successful!')
        setShowLogin(false)
        setLoginEmail('')
        setLoginPassword('')
        await startCheckout()
      }
    } catch (error) {
      toast.error('Login failed. Please try again.')
    } finally {
      setLoggingIn(false)
    }
  }

  const sendOtp = async (phone: string) => {
    setSendingOtp(true)
    try {
      const response = await fetch('/api/checkout/otp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone })
      })
      
      const result = await response.json()
      
      if (response.ok) {
        if (result.debug && result.debug.otp) {
          console.log('🔑 [DEV MODE] OTP Code:', result.debug.otp)
          console.log('📱 [DEV MODE] Phone:', phone)
          console.log('⏰ [DEV MODE] Valid for 10 minutes')
        }
        
        toast.success('OTP sent successfully!')
        setOtpCountdown(60)
        setPhoneToVerify(phone)
        setOtpModalOpen(true)
      } else {
        toast.error(result.error || 'Failed to send OTP')
      }
    } catch (error) {
      toast.error('Failed to send OTP. Please try again.')
    } finally {
      setSendingOtp(false)
    }
  }

  const verifyOtp = async () => {
    if (!otpCode || otpCode.length !== 6) {
      toast.error('Please enter a valid 6-digit OTP')
      return
    }

    setVerifyingOtp(true)
    try {
      const response = await fetch('/api/auth/otp', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ phone: phoneToVerify, otp: otpCode })
      })
      
      const responseData = await response.json()
      
      if (response.ok) {
        toast.success('Phone number verified successfully!')
        setOtpVerified(true)
        setOtpModalOpen(false)
        setOtpCode('')
      } else {
        let errorMessage = 'Invalid OTP'
        
        if (responseData.error) {
          switch (responseData.error) {
            case 'Invalid or expired OTP':
              errorMessage = 'The OTP code you entered is incorrect or has expired. Please check and try again.'
              break
            case 'OTP has expired':
              errorMessage = 'This OTP has expired. Please request a new one.'
              break
            case 'OTP has already been used':
              errorMessage = 'This OTP has already been used. Please request a new one.'
              break
            default:
              errorMessage = responseData.error
          }
        }
        
        toast.error(errorMessage)
        setOtpCode('')
      }
    } catch (error) {
      toast.error('Failed to verify OTP. Please check your connection and try again.')
      setOtpCode('')
    } finally {
      setVerifyingOtp(false)
    }
  }

  const resendOtp = async () => {
    if (otpCountdown > 0) return
    await sendOtp(phoneToVerify)
  }

  const confirmOrder = async () => {
    try {
      const requestData = {
        guestData: checkoutData?.userType === 'guest' ? guestData : undefined,
        selectedAddressId: checkoutData?.userType === 'registered' ? selectedAddressId : undefined,
        useNewAddress: checkoutData?.userType === 'registered' ? useNewAddress : undefined,
        newAddress: checkoutData?.userType === 'registered' && useNewAddress ? newAddress : undefined
      }

      const response = await fetch('/api/checkout/confirm', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(requestData)
      })

      const result = await response.json()
      
      if (response.ok) {
        setOrderConfirmed(true)
        setOrderData(result.data)
        toast.success('Order confirmed!')
      } else {
        toast.error(result.error || 'Failed to confirm order')
      }
    } catch (error) {
      console.error('Error confirming order:', error)
      toast.error('Failed to confirm order')
    }
  }

  const processPayment = async () => {
    if (!orderData) return

    setProcessingPayment(true)
    try {
      const response = await fetch('/api/checkout/payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          paymentMethod,
          orderData
        })
      })

      const result = await response.json()
      
      if (response.ok) {
        if (paymentMethod === 'cod') {
          toast.success('Order placed successfully!')
          router.push('/checkout/success')
        } else {
          window.location.href = result.data.paymentUrl
        }
      } else {
        toast.error(result.error || 'Failed to process payment')
      }
    } catch (error) {
      console.error('Error processing payment:', error)
      toast.error('Failed to process payment')
    } finally {
      setProcessingPayment(false)
    }
  }

  useEffect(() => {
    if (selectedCity && checkoutData) {
      const city = checkoutData.cities.find(c => c.id.toString() === selectedCity)
      if (city) {
        setSelectedZone('')
        setDeliveryFee(50)
      }
    }
  }, [selectedCity, checkoutData])

  useEffect(() => {
    if (selectedZone && checkoutData) {
      const city = checkoutData.cities.find(c => c.id.toString() === selectedCity)
      if (city) {
        const zone = city.zones.find(z => z.id.toString() === selectedZone)
        if (zone) {
          setDeliveryFee(Number(zone.delivery_fee))
        }
      }
    }
  }, [selectedZone, selectedCity, checkoutData])

  useEffect(() => {
    if (otpCountdown > 0) {
      const timer = setTimeout(() => setOtpCountdown(otpCountdown - 1), 1000)
      return () => clearTimeout(timer)
    }
  }, [otpCountdown])

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 via-rose-50 to-pink-100">
        <div className="container mx-auto p-4">
          <div className="animate-pulse space-y-4">
            <div className="h-8 bg-gray-200 rounded w-1/4"></div>
            <div className="grid gap-8 lg:grid-cols-3">
              <div className="lg:col-span-2 space-y-4">
                {[1, 2, 3].map((i) => (
                  <div key={i} className="h-32 bg-gray-200 rounded-lg"></div>
                ))}
              </div>
              <div className="h-64 bg-gray-200 rounded-lg"></div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  if (!checkoutData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 via-rose-50 to-pink-100 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">Something went wrong</h1>
          <p className="text-gray-600 mb-6">Unable to load checkout data</p>
          <Link href="/cart">
            <Button className="bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600">
              Return to Cart
            </Button>
          </Link>
        </div>
      </div>
    )
  }

  const subtotal = checkoutData.cart?.total || 0
  const total = subtotal + deliveryFee

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-rose-50 to-pink-100">
      <div className="container mx-auto p-4">
        <div className="flex items-center gap-4 mb-8">
          <Link href="/cart">
            <Button variant="ghost" size="sm" className="text-pink-800 hover:text-pink-900">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Cart
            </Button>
          </Link>
          <h1 className="text-3xl font-bold text-pink-800">Checkout</h1>
        </div>

        <div className="grid gap-8 lg:grid-cols-3">
          <div className="lg:col-span-2 space-y-6">
            <Card className="border-2 border-pink-200 rounded-3xl">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-pink-800">
                  <User className="h-5 w-5" />
                  Customer Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {checkoutData.userType === 'registered' ? (
                  <div className="space-y-4">
                    <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center gap-2 text-green-800">
                        <CheckCircle className="h-4 w-4" />
                        <span className="font-medium">Logged in as: {checkoutData.user?.email}</span>
                      </div>
                      <p className="text-sm text-green-600 mt-1">
                        {checkoutData.user?.firstName} {checkoutData.user?.lastName} • {checkoutData.user?.phone}
                      </p>
                    </div>
                    
                    <div className="space-y-3">
                      <Label className="text-base font-medium">Delivery Address</Label>
                      
                      {checkoutData.user?.addresses && checkoutData.user.addresses.length > 0 && (
                        <div className="space-y-2">
                          {checkoutData.user.addresses.map((address) => (
                            <div key={address.id} className="flex items-center space-x-2">
                              <input
                                type="radio"
                                id={`address-${address.id}`}
                                name="address"
                                value={address.id}
                                checked={selectedAddressId === address.id}
                                onChange={(e) => setSelectedAddressId(Number(e.target.value))}
                                className="text-pink-600 focus:ring-pink-500"
                              />
                              <Label htmlFor={`address-${address.id}`} className="flex-1 cursor-pointer">
                                <div className="p-3 border rounded-lg hover:bg-pink-50">
                                  <p className="font-medium">{address.street_address}</p>
                                  {address.additional_info && (
                                    <p className="text-sm text-gray-600">{address.additional_info}</p>
                                  )}
                                  <p className="text-sm text-gray-600">
                                    {address.city_name}, {address.zone_name}
                                  </p>
                                  <p className="text-sm text-gray-600">Delivery Fee: {address.delivery_fee} EGP</p>
                                </div>
                              </Label>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      <div className="flex items-center space-x-2">
                        <input
                          type="radio"
                          id="new-address"
                          name="address"
                          checked={useNewAddress}
                          onChange={(e) => setUseNewAddress(e.target.checked)}
                          className="text-pink-600 focus:ring-pink-500"
                        />
                        <Label htmlFor="new-address" className="cursor-pointer">
                          Use a new address
                        </Label>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                      <div className="flex items-center justify-between">
                        <div>
                          <h3 className="font-medium text-blue-800">Have an account?</h3>
                          <p className="text-sm text-blue-600">Login to use your saved addresses and get faster checkout</p>
                        </div>
                        <Button
                          onClick={() => setShowLogin(true)}
                          variant="outline"
                          className="border-blue-300 text-blue-700 hover:bg-blue-100"
                        >
                          <LogIn className="h-4 w-4 mr-2" />
                          Login
                        </Button>
                      </div>
                    </div>
                    
                    <div className="grid gap-4 md:grid-cols-2">
                      <div>
                        <Label htmlFor="name">Full Name *</Label>
                        <Input
                          id="name"
                          value={guestData.name}
                          onChange={(e) => setGuestData({ ...guestData, name: e.target.value })}
                          placeholder="Enter your full name"
                          className="mt-1"
                        />
                      </div>
                      <div>
                        <Label htmlFor="email">Email *</Label>
                        <Input
                          id="email"
                          type="email"
                          value={guestData.email}
                          onChange={(e) => handleEmailChange(e.target.value)}
                          placeholder="Enter your email"
                          className={`mt-1 ${emailError ? 'border-red-500' : ''}`}
                        />
                        {emailError && <p className="text-red-500 text-sm mt-1">{emailError}</p>}
                      </div>
                      <div>
                        <Label htmlFor="phone">Phone Number *</Label>
                        <Input
                          id="phone"
                          value={guestData.phone}
                          onChange={(e) => handlePhoneChange(e.target.value)}
                          placeholder="01234567890"
                          className={`mt-1 ${phoneError ? 'border-red-500' : ''}`}
                        />
                        {phoneError && <p className="text-red-500 text-sm mt-1">{phoneError}</p>}
                        {guestData.phone && !phoneError && (
                          <Button
                            onClick={() => sendOtp(guestData.phone)}
                            disabled={sendingOtp || otpVerified}
                            size="sm"
                            className="mt-2 bg-green-600 hover:bg-green-700"
                          >
                            {otpVerified ? (
                              <>
                                <CheckCircle className="h-4 w-4 mr-2" />
                                Verified
                              </>
                            ) : (
                              <>
                                <Shield className="h-4 w-4 mr-2" />
                                {sendingOtp ? 'Sending...' : 'Verify Phone'}
                              </>
                            )}
                          </Button>
                        )}
                      </div>
                    </div>
                    
                    <div className="space-y-4">
                      <Label htmlFor="address">Delivery Address *</Label>
                      <Textarea
                        id="address"
                        value={guestData.address}
                        onChange={(e) => setGuestData({ ...guestData, address: e.target.value })}
                        placeholder="Enter your full address"
                        rows={3}
                      />
                      
                      <div className="grid gap-4 md:grid-cols-2">
                        <div>
                          <Label htmlFor="city">City *</Label>
                          <Select value={selectedCity} onValueChange={setSelectedCity}>
                            <SelectTrigger className="mt-1">
                              <SelectValue placeholder="Select a city" />
                            </SelectTrigger>
                            <SelectContent>
                              {checkoutData.cities.map((city) => (
                                <SelectItem key={city.id} value={city.id.toString()}>
                                  {city.name}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <Label htmlFor="zone">Zone *</Label>
                          <Select value={selectedZone} onValueChange={setSelectedZone}>
                            <SelectTrigger className="mt-1">
                              <SelectValue placeholder="Select a zone" />
                            </SelectTrigger>
                            <SelectContent>
                              {checkoutData.cities
                                .find(city => city.id.toString() === selectedCity)
                                ?.zones.map((zone) => (
                                  <SelectItem key={zone.id} value={zone.id.toString()}>
                                    {zone.name} ({zone.delivery_fee} EGP)
                                  </SelectItem>
                                ))}
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                      
                      <div>
                        <Label htmlFor="additionalInfo">Additional Information (Optional)</Label>
                        <Textarea
                          id="additionalInfo"
                          value={guestData.additionalInfo || ''}
                          onChange={(e) => setGuestData({ ...guestData, additionalInfo: e.target.value })}
                          placeholder="Apartment, suite, etc. (optional)"
                          rows={2}
                        />
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {checkoutData.userType === 'registered' && useNewAddress && (
              <Card className="border-2 border-pink-200 rounded-3xl">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-pink-800">
                    <MapPin className="h-5 w-5" />
                    New Address
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="newStreetAddress">Street Address *</Label>
                    <Textarea
                      id="newStreetAddress"
                      value={newAddress.street_address}
                      onChange={(e) => setNewAddress({ ...newAddress, street_address: e.target.value })}
                      placeholder="Enter street address"
                      rows={3}
                    />
                  </div>
                  
                  <div>
                    <Label htmlFor="newAdditionalInfo">Additional Information (Optional)</Label>
                    <Textarea
                      id="newAdditionalInfo"
                      value={newAddress.additional_info}
                      onChange={(e) => setNewAddress({ ...newAddress, additional_info: e.target.value })}
                      placeholder="Apartment, suite, etc. (optional)"
                      rows={2}
                    />
                  </div>
                  
                  <div className="grid gap-4 md:grid-cols-2">
                    <div>
                      <Label htmlFor="newCity">City *</Label>
                      <Select value={newAddress.city_id.toString()} onValueChange={(value) => setNewAddress({ ...newAddress, city_id: Number(value) })}>
                        <SelectTrigger className="mt-1">
                          <SelectValue placeholder="Select a city" />
                        </SelectTrigger>
                        <SelectContent>
                          {checkoutData.cities.map((city) => (
                            <SelectItem key={city.id} value={city.id.toString()}>
                              {city.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div>
                      <Label htmlFor="newZone">Zone *</Label>
                      <Select value={newAddress.zone_id.toString()} onValueChange={(value) => setNewAddress({ ...newAddress, zone_id: Number(value) })}>
                        <SelectTrigger className="mt-1">
                          <SelectValue placeholder="Select a zone" />
                        </SelectTrigger>
                        <SelectContent>
                          {checkoutData.cities
                            .find(city => city.id.toString() === newAddress.city_id.toString())
                            ?.zones.map((zone) => (
                              <SelectItem key={zone.id} value={zone.id.toString()}>
                                {zone.name} ({zone.delivery_fee} EGP)
                              </SelectItem>
                            ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {orderConfirmed && (
              <Card className="border-2 border-pink-200 rounded-3xl">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2 text-pink-800">
                    <CreditCard className="h-5 w-5" />
                    Payment Method
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="flex items-center space-x-2">
                      <input
                        type="radio"
                        id="cod"
                        name="paymentMethod"
                        value="cod"
                        checked={paymentMethod === 'cod'}
                        onChange={(e) => setPaymentMethod(e.target.value as 'cod' | 'paymob')}
                        className="text-pink-600 focus:ring-pink-500"
                      />
                      <Label htmlFor="cod" className="flex items-center gap-2 cursor-pointer">
                        <span>Cash on Delivery</span>
                        <Badge variant="secondary" className="bg-green-100 text-green-700">
                          Pay when you receive
                        </Badge>
                      </Label>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <input
                        type="radio"
                        id="paymob"
                        name="paymentMethod"
                        value="paymob"
                        checked={paymentMethod === 'paymob'}
                        onChange={(e) => setPaymentMethod(e.target.value as 'cod' | 'paymob')}
                        className="text-pink-600 focus:ring-pink-500"
                      />
                      <Label htmlFor="paymob" className="flex items-center gap-2 cursor-pointer">
                        <span>Paymob</span>
                        <Badge variant="secondary" className="bg-blue-100 text-blue-700">
                          Secure online payment
                        </Badge>
                      </Label>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </div>

          <div className="space-y-6">
            <Card className="border-2 border-pink-200 rounded-3xl">
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-pink-800">
                  <Package className="h-5 w-5" />
                  Order Summary
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-4">
                  {checkoutData.cart?.items.map((item) => (
                    <div key={item.id} className="flex gap-3 p-3 border rounded-lg">
                      <div className="flex-shrink-0">
                        <img
                          src={item.imageUrl}
                          alt={item.name}
                          className="w-16 h-16 object-cover rounded-lg"
                          onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/images/default-cookie.jpg';
                          }}
                        />
                      </div>
                      
                      <div className="flex-1 min-w-0">
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <h4 className="font-medium text-gray-900 truncate">{item.name}</h4>
                            <p className="text-sm text-gray-600">Qty: {item.quantity}</p>
                            {item.isPack && (
                              <p className="text-sm text-gray-600">Pack Size: {item.packSize}</p>
                            )}
                          </div>
                          <span className="font-semibold text-gray-900">{item.total.toFixed(2)} EGP</span>
                        </div>
                        
                        {item.flavors && item.flavors.length > 0 && (
                          <div className="mt-2">
                            <p className="text-xs text-gray-500 font-medium mb-1">Selected Flavors:</p>
                            <div className="flex flex-wrap gap-1">
                              {item.flavors.map((flavor) => (
                                <Badge key={flavor.id} variant="outline" className="text-xs">
                                  {flavor.name} ({flavor.quantity})
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="border-t pt-4 space-y-2">
                  <div className="flex justify-between">
                    <span>Subtotal</span>
                    <span>{subtotal.toFixed(2)} EGP</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Delivery Fee</span>
                    <span>{Number(deliveryFee).toFixed(2)} EGP</span>
                  </div>
                  <div className="border-t pt-2">
                    <div className="flex justify-between font-semibold text-lg">
                      <span>Total</span>
                      <span>{total.toFixed(2)} EGP</span>
                    </div>
                  </div>
                </div>

                {!orderConfirmed ? (
                  <Button
                    onClick={confirmOrder}
                    className="w-full bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600 rounded-full py-6 text-lg font-bold"
                    disabled={
                      checkoutData.userType === 'guest' && 
                      (!guestData.name || !guestData.email || !guestData.phone || !guestData.address || !selectedZone || !otpVerified)
                    }
                  >
                    Confirm Order
                  </Button>
                ) : (
                  <Button
                    onClick={processPayment}
                    disabled={processingPayment}
                    className="w-full bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600 rounded-full py-6 text-lg font-bold"
                  >
                    {processingPayment ? (
                      <>
                        <RefreshCw className="mr-2 h-4 animate-spin" />
                        Processing...
                      </>
                    ) : paymentMethod === 'cod' ? (
                      'Place Order (Cash on Delivery)'
                    ) : (
                      'Proceed to Payment'
                    )}
                  </Button>
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        <Dialog open={showLogin} onOpenChange={setShowLogin}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Login to Your Account</DialogTitle>
            </DialogHeader>
            <form onSubmit={handleLogin} className="space-y-4">
              <div>
                <Label htmlFor="loginEmail">Email</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <Input
                    id="loginEmail"
                    type="email"
                    value={loginEmail}
                    onChange={(e) => setLoginEmail(e.target.value)}
                    placeholder="Enter your email"
                    className="pl-10"
                    required
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="loginPassword">Password</Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <Input
                    id="loginPassword"
                    type="password"
                    value={loginPassword}
                    onChange={(e) => setLoginPassword(e.target.value)}
                    placeholder="Enter your password"
                    className="pl-10"
                    required
                  />
                </div>
              </div>
              <div className="flex gap-2">
                <Button
                  type="submit"
                  disabled={loggingIn}
                  className="flex-1"
                >
                  {loggingIn ? (
                    <>
                      <RefreshCw className="mr-2 h-4 animate-spin" />
                      Logging in...
                    </>
                  ) : (
                    'Login'
                  )}
                </Button>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowLogin(false)}
                >
                  Cancel
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>

        <Dialog open={otpModalOpen} onOpenChange={setOtpModalOpen}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Verify Phone Number</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <p className="text-sm text-gray-600">
                Enter the 6-digit code sent to {phoneToVerify}
              </p>
              <div className="space-y-2">
                <Label htmlFor="otp">OTP Code</Label>
                <Input
                  id="otp"
                  type="text"
                  value={otpCode}
                  onChange={(e) => setOtpCode(e.target.value.replace(/\D/g, '').slice(0, 6))}
                  placeholder="Enter 6-digit code"
                  maxLength={6}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && otpCode.length === 6) {
                      verifyOtp()
                    }
                  }}
                />
              </div>
              <div className="flex gap-2">
                <Button
                  onClick={verifyOtp}
                  disabled={otpCode.length !== 6 || verifyingOtp}
                  className="flex-1"
                >
                  {verifyingOtp ? (
                    <>
                      <RefreshCw className="mr-2 h-4 animate-spin" />
                      Verifying...
                    </>
                  ) : (
                    'Verify'
                  )}
                </Button>
                <Button
                  variant="outline"
                  onClick={resendOtp}
                  disabled={otpCountdown > 0}
                >
                  {otpCountdown > 0 ? `${otpCountdown}s` : 'Resend'}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  )
} 